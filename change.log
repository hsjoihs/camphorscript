
ver 0.1.18 15:25 2014/04/03 (木)
バグの巣窟Base_Step1のundefinedをEitherモナドでgracefully fail させた

ver 0.1.17 14:22 2014/04/03 (木)
ccsc -o aaa.txt aaa.bfのみならず
ccsc aaa.bf -o aaa.txtにも対応

ver 0.1.16 15:57 2014/04/02 (水)
ccsc -o aaa.bf aaa.txtのみならず
ccsc aaa.txt -o aaa.bfにも対応

ver 0.1.15 19:51 2014/04/01 (火)
#defineが再帰的な(但し自己再帰はしない)置換を起こすように変更
更にC関数型マクロは無視するよう変更(尚なかなかのゴリ押しである)
但し構文エラー系の物のテストが不足しているので気をつけねば
ということでプリプロセスデバッグ用のオプション-Xを作成

ver 0.1.14 23:21 2014/03/31 (月)
ユーザーの不正入力を落とすerrorをSafeにあるabortに変更
残るバグの巣窟はBase_Step4(error)とBase_Step1(\(Right x)->x)

ver 0.1.13 18:25 2014/03/31 (月)
Base_Step1のバグ抜き(型宣言追加)
そしてbyteというparserを追加、これで'a'を読んで97を返してくれる。

ver 0.1.12 11:11 2014/03/31 (月)
ccsrc(R_Step8のみ)完成
-C4などが-C44の意味になるように

ver 0.1.11 11:01 2014/03/31 (月)
R_Step8を作成

ver 0.1.10  9:24 2014/03/31 (月)
IOがぐちゃぐちゃしてきたので書き直し
オプション無しだと-C48で行うよう変更

ver 0.1.9  20:30 2014/03/30 (日)
examplesを別ファイルに
ccsrc(reverse compiler)を作成(途中)


ver 0.1.8  20:15 2014/03/30 (日)
Step4関連のwarning抜き。

ver 0.1.7  18:45 2014/03/30 (日)
writeでREAと出力されていたバグ修正
Step4作成終了
Step5,6を手抜きで作成
main2をccscに改名

ver 0.1.6  15:43 2014/03/30 (日)
Step4を半分作成し、それでparseしたisNumberを保存
I/Oエラーのメッセージを分かりやすく
更にBase_Step1のwarning抜き

ver 0.1.5  12:50 2014/03/30 (日)
大量のサンプルファイル作成
更にstep3-6のファイルだけ作成
ついでに'流れ.txt'に英語訳を付けてコメントとして挿入


ver 0.1.4  21:39 2014/03/29 (土)
main2.hsにIOを突っ込んで実行ファイルを作成。
-C11 -C77 -C78で無事実行に成功。
割とうまく行って驚いている次第である。

ver 0.1.3  21:46 2014/03/26 (水)
型シグネチャとか足したら見づらくなったので7と8を分割

ver 0.1.2  21:15 2014/03/26 (水)
このままではデバッグとリリースの切り替えが面倒なので改良
Baseモジュール(モジュールの本体で、基本的に全てエクスポートする)と
non-Baseモジュール(Baseモジュールをインポートし、必要な物のみをエクスポート)を作る。
あとはmain.hsにてデバッグ時はBaseを、リリース時にはnon-Baseをインポートすればよい。
これならばグローバルモジュールも上手く使えて便利。

ver 0.1.1   7:50 2014/03/26 (水)
example1をより充実させ、step2のファイルだけ作成。

ver 0.1.0   7:20 2014/03/26 (水)
あまりにも汚く面倒くさくなったので0.0.8に差し戻し
C的関数型マクロは採用しないことに
つまりstep1完成ということでstep1モジュール化&位上げ

ver 0.0.9   22:14 2014/03/25 (火)
関数型Cマクロの準備完了
但し今のところ呼ばれたらエラーを吐く仕様

ver 0.0.8   21:13 2014/03/25 (火)
行がずれるとデバッグしにくいのでプリプロセスしたのは"\n"に置換

ver 0.0.7   21:05 2014/03/25 (火)
step1のマクロ置換を行った
(\(Right x)->x)とかいう怖い関数使ったのが気掛かり

ver 0.0.6   19:36 2014/03/25 (火)
step1のマクロ置換以外を行った
エラーを抑えるよりどちらかと言うとエラーを吐かせる方が面倒だ
Cマクロは#define以外は単純なので大変ではなかった
あとincludeは作っていない。何故ならIOが要るから。

ver 0.0.5   13:33 2014/03/25 (火)
step7のwarning抜きを行った。
-Wall -fno-warn-unused-do-bind  -fno-warn-missing-signaturesのオプション。
あとstep1のファイルだけ作成

ver 0.0.4   21:19 2014/03/24 (月)
step7_8をモジュール化してメイン処理はmain.hsで行うことに。

ver 0.0.3   21:11 2014/03/24 (月)
ComCamScrとCPreProcの仕様書を書く。

ver 0.0.2   19:19 2014/03/24 (月)
Step7のところでコメントエスケープを処理するようにしたので:
Before
  ↓Step5(メモリ割り当て&インクリメント最適化)
  ↓Step6(コメントエスケープ)

After
  ↓Step5(メモリ割り当て)
  ↓Step6(インクリメント/デクリメント最適化)


ver 0.0.1   18:34 2014/03/24 (月)
JSだと非常に辛くなるのは十分予想できるのでHaskellで書くことに。
CamphorScript
  ↓Step1(C的マクロ展開)
  ↓Step2(関数的マクロ展開)
  ↓Step3(糖衣構文プリプロセス)
CompiledCamphorScript
  ↓Step4(逐語訳)
  ↓Step5(メモリ割り当て&インクリメント最適化)
  ↓Step6(コメントエスケープ)
nouDarake
  ↓Step7(記号化)
  ↓Step8(空白削除)
Brainf*ck

という流れを決定し、Step7とStep8を完成。


ver 0.0.0   19:25 2014/03/02 (日)
Brainf*ckに翻訳できる言語の名前をCamphorScriptに。
Brain→脳→樟脳→Camphorってこと。

CamphorScript→マクロ展開されたCamphorScript→nouDarake→Brainf*ckと翻訳される。
仕様書は後ほど。