<!DOCTYPE html>

<html lang="ja"><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
	
	<link rel="stylesheet" type="text/css" href="files2/main.css">
	<title>PCS Syntax 201409231738</title>
</head>

<body contenteditable="false">
<div id="all">
	<div id="main">
		<div class="chapter">
			
			<p>
				<span class="pat">allchar</span> = 
				<span class="pat">alphanumbar</span> |
				<span class="pat">opsymbol</span> |
				<span class="pat">bracs</span> |
				<span class="pat">future</span> |
				<span class="pat">white</span> |
				<span class="pat">scolon</span>;
			</p>
			<p>
				<span class="pat">opsymbol</span> = 
				<span class="str">'!'</span> |
				<span class="str">'%'</span> |
				<span class="str">'&amp;'</span> |
				<span class="str">'*'</span> |
				<span class="str">'+'</span> |
				<span class="str">','</span> |
				<span class="str">'-'</span> |
				<span class="str">'/'</span> |
				<span class="str">':'</span> |
				<span class="str">'&lt;'</span> |
				<span class="str">'='</span> |
				<span class="str">'&gt;'</span> |
				<span class="str">'?'</span> |
				<span class="str">'@'</span> |
				<span class="str">'^'</span> |
				<span class="str">'|'</span> |
				<span class="str">'~'</span>;
			</p>
			<p>
				<span class="pat">bracs</span> =
				<span class="str">'('</span> |
				<span class="str">')'</span> |
				<span class="str">'{'</span> |
				<span class="str">'}'</span> |
				<span class="str">'"'</span> |
				<span class="str">"'"</span>;
			</p>
			<p>
				<span class="pat">scolon</span> = <span class="str">';'</span>;
			</p>
			<p>
				<span class="pat">white</span> = 
				<span class="spe">? 0x20 ?</span> | 
				<span class="pat">nswhite</span>;
			</p>
			<p>
				<span class="pat">nswhite</span> = 
				<span class="pat">newline</span> | 
				<span class="spe">? 0x09 ?</span>;
			</p>
			<p>
				<span class="pat">newline</span> = 
				<span class="spe">? 0x0A ?</span> | 
				<span class="spe">? 0x0D ?</span>;
			</p>
			<p>
				<span class="pat">future</span> =
				<span class="str">'#'</span> |
				<span class="str">'$'</span> |
				<span class="str">'.'</span> |
				<span class="str">'`'</span> |
				<span class="str">'['</span> |
				<span class="str">']'</span>;
			</p>
		
			
			<p>
				<span class="pat">digit</span> = 
				<span class="str">'0'</span> |
				<span class="str">'1'</span> |
				<span class="str">'2'</span> |
				<span class="str">'3'</span> |
				<span class="str">'4'</span> |
				<span class="str">'5'</span> |
				<span class="str">'6'</span> |
				<span class="str">'7'</span> |
				<span class="str">'8'</span> |
				<span class="str">'9'</span>;
			</p>
			<p>
				<span class="pat">alphanumbar</span> = <span class="pat">alphabar</span> | <span class="pat">digit</span>;
			</p>
			<p>
				<span class="pat">alphabar</span> = 
				<span class="str">'A'</span> |
				<span class="str">'B'</span> |
				<span class="str">'C'</span> |
				<span class="str">'D'</span> |
				<span class="str">'E'</span> |
				<span class="str">'F'</span> |
				<span class="str">'G'</span> |
				<span class="str">'H'</span> |
				<span class="str">'I'</span> |
				<span class="str">'J'</span> |
				<span class="str">'K'</span> |
				<span class="str">'L'</span> |
				<span class="str">'M'</span> |
				<span class="str">'N'</span> |
				<span class="str">'O'</span> |
				<span class="str">'P'</span> |
				<span class="str">'Q'</span> |
				<span class="str">'R'</span> |
				<span class="str">'S'</span> |
				<span class="str">'T'</span> |
				<span class="str">'U'</span> |
				<span class="str">'V'</span> |
				<span class="str">'W'</span> |
				<span class="str">'X'</span> |
				<span class="str">'Y'</span> |
				<span class="str">'Z'</span> |
				<span class="str">'a'</span> |
				<span class="str">'b'</span> |
				<span class="str">'c'</span> |
				<span class="str">'d'</span> |
				<span class="str">'e'</span> |
				<span class="str">'f'</span> |
				<span class="str">'g'</span> |
				<span class="str">'h'</span> |
				<span class="str">'i'</span> |
				<span class="str">'j'</span> |
				<span class="str">'k'</span> |
				<span class="str">'l'</span> |
				<span class="str">'m'</span> |
				<span class="str">'n'</span> |
				<span class="str">'o'</span> |
				<span class="str">'p'</span> |
				<span class="str">'q'</span> |
				<span class="str">'r'</span> |
				<span class="str">'s'</span> |
				<span class="str">'t'</span> |
				<span class="str">'u'</span> |
				<span class="str">'v'</span> |
				<span class="str">'w'</span> |
				<span class="str">'x'</span> |
				<span class="str">'y'</span> |
				<span class="str">'z'</span> |
				<span class="str">'_'</span>;
			</p>
			
			<p><span class="pat">ident</span><span> =
				( </span><span class="pat">alphabar</span><span>, 
				{
					</span><span class="pat">alphanumbar</span><span>
				} ) - </span><span class="pat">reserved</span><span>;</span><br></p>
			<p>
				<span class="pat">reserved</span> =
				<span class="str">'char'</span> |
				<span class="str">'delete'</span> |
				<span class="str">'infixl'</span> |
				<span class="str">'infixr'</span> |
				<span class="str">'void'</span> |
				<span class="str">'constant'</span> |
				<span class="str">'const'</span> |
				<span class="str">'syntax'</span> |
				<span class="str">'block'</span>;</p>
			<p>
				<span class="pat">num</span> = <span class="pat">uint1</span> | <span class="pat">uint2</span>;
			</p>
			<p>
				<span class="pat">uint1</span> = <span class="pat">digit</span>, { <span class="pat">digit</span> };
			</p>
			<p>
				<span class="pat">uint2</span> = 
				<span class="str">"'"</span>,
				( 
					<span class="pat">allchar</span> - 
					(
						<span class="str">"'"</span>  |
						<span class="pat">nswhite</span> 
					)
				),
				<span class="str">"'"</span>;
			</p>
			
			<p><span class="pat" >typebase</span><span > = </span><span class="str" >'char'</span><span >;</span></p></div><div class="chapter">
			<p>
				<span class="pat">vardef</span> =
				<span class="pat">typebase</span>, <span class="pat">white</span>, <span class="pat">__</span>, 
				<span class="pat">singledef</span>, <span class="pat">__</span>, 
				{
					<span class="str">','</span>, <span class="pat">__</span>, 
					<span class="pat">singledef</span>, <span class="pat">__</span>
				},
				<span class="pat">__</span>,  <span class="pat">scolon</span>;
			</p>
			<p><span class="pat">singledef</span> = 
			   <span class="pat">ident</span>, <span class="pat">__</span>, 
			   [ 
					<span class="str">'='</span>, <span class="pat">__</span>, 
					{
						<span class="pat">ident</span>, <span class="pat">__</span>, 
						<span class="str">'='</span>, <span class="pat">__</span> 
					}, 
					<span class="pat">num</span>
			   ];</p>
			<p>
				<span class="pat">vardel</span> = 
				<span class="str">'delete'</span>, <span class="pat">white</span>, <span class="pat">__</span>, 
				<span class="pat">ident</span>, <span class="pat">__</span>, 
				<span class="pat">scolon</span>;</p>
			<p>
				<span class="pat">block2</span> = 
				<span class="str">'{'</span>, 
				{ <span class="pat">sentence</span> }
				<span class="str">'}'</span>;</p></div><div class="chapter">
			<p>
				<span class="pat">type</span> = 
				<span class="str">'constant'</span>, <span class="pat">white</span>, <span class="pat">__</span>, 
				<span class="pat">typebase</span> |
				<span class="str">'const'</span>, <span class="pat">white</span>, <span class="pat">__</span>, 
				<span class="pat">typebase</span> |
				<span class="pat">typebase</span>, <span class="pat">__</span>, 
				<span class="str">'&amp;'</span>;
			<p>
				<span class="pat">typelist</span> = 
				<span class="pat">type</span>, <span class="pat">__</span>, 
				<span class="pat">ident</span>, <span class="pat">__</span>, 
				{
					<span class="pat">op</span>, <span class="pat">__</span>, 
					<span class="pat">type</span>, <span class="pat">__</span>, 
					<span class="pat">ident</span>, <span class="pat">__</span>
				};</p>
			<p>
				<span class="pat">valuelist</span> = 
				<span class="pat">value</span>, <span class="pat">__</span>, 
				{
					<span class="pat">op</span>, <span class="pat">__</span>, 
					<span class="pat">value</span>, <span class="pat">__</span>
				};</p>
			<p>
				<span class="pat">tailtypelist</span> = 
				{
					<span class="pat">op</span>, <span class="pat">__</span>, 
					<span class="pat">type</span>, <span class="pat">__</span>, 
					<span class="pat">ident</span>, <span class="pat">__</span>
				};</p>
			<p>
				<span class="pat">tailvaluelist</span> = 
				{
					<span class="pat">op</span>, <span class="pat">__</span>, 
					<span class="pat">value</span>, <span class="pat">__</span>
				};</p>
			<p>
				<span class="pat">funcdef</span> = 
				<span class="str">'void'</span>, <span class="pat">white</span>, <span class="pat">__</span>, 
				<span class="pat">ident</span>,  <span class="pat">__</span>, 
				<span class="str">'('</span>, <span class="pat">__</span>, 
				<span class="pat">typelist</span>, <span class="pat">__</span>, 
				<span class="str">')'</span>, <span class="pat">__</span>, 
				<span class="pat">blockornull</span>;
			</p>
			<p>
				<span class="pat">blockornull</span> = 
				<span class="pat">block2</span> | 
				<span class="str">'='</span>, <span class="pat">__</span>, 
				<span class="str">'0'</span>, <span class="pat">__</span>, 
				<span class="pat">scolon</span>;
			</p>
			<p><span class="pat" >infixl</span><span > = 
				</span><span class="str" >'infixl'</span><span >, </span><span class="pat" >white</span><span >, </span><span class="pat" >__</span><span >, 
				</span><span class="pat" >num</span><span >, </span><span class="pat" >__</span><span >, 
				</span><span class="str" >'('</span><span >, </span><span class="pat" >__</span><span >, 
				</span><span class="pat" >op</span><span >, </span><span class="pat" >__</span><span >, 
				</span><span class="str" >')'</span><span >, </span><span class="pat" >__</span><span >, 
				</span><span class="pat" >scolon</span><span >;</span><br></p>
			<p>
				<span class="pat">infixr</span> = 
				<span class="str">'infixr'</span>, <span class="pat">white</span>, <span class="pat">__</span>, 
				<span class="pat">num</span>, <span class="pat">__</span>, 
				<span class="str">'('</span>, <span class="pat">__</span>, 
				<span class="pat">op</span>, <span class="pat">__</span>, 
				<span class="str">')'</span>, <span class="pat">__</span>, 
				<span class="pat">scolon</span>;
			</p>
			<p><span class="pat">operdef</span> = 
				<span class="str">'void'</span>, <span class="pat">__</span>, 
				<span class="str">'('</span>, <span class="pat">__</span>, 
				<span class="pat">op</span>, <span class="pat">__</span>, 
				<span class="str">')'</span>, <span class="pat">__</span>, 
				<span class="str">'('</span>, <span class="pat">__</span>, 
				<span class="pat">typelist</span>, <span class="pat">__</span>, 
				<span class="pat">scolon</span>, <span class="pat">__</span>, 
				<span class="pat">typelist</span>, <span class="pat">__</span>, 
				<span class="str">')'</span>, <span class="pat">__</span>, 
				<span class="pat">blockornull</span>;</p>
			<p>
				<span class="pat">syndef</span> = 
				<span class="str">'syntax'</span>, <span class="pat">white</span>, <span class="pat">__</span>, 
				<span class="pat">ident</span>, <span class="pat">__</span>, 
				<span class="str">'('</span>, <span class="pat">__</span>, 
				(<span class="pat">typelist</span> | <span class="pat">tailtypelist</span>), <span class="pat">__</span>, 
				<span class="str">')'</span>, <span class="pat">__</span>, 
				<span class="str">'{'</span>, <span class="pat">__</span>, 
				<span class="str">'block'</span>, <span class="pat">__</span>, 
				{
					<span class="pat">scolon</span> | <span class="pat">__</span>
				}
				<span class="str">'}'</span>, <span class="pat">__</span>, 
				<span class="pat">block2</span>;</p>
			<p>
				<span class="pat">funccall</span> = 
				<span class="pat">ident</span>, <span class="pat">__</span>, 
				<span class="str">'('</span>, <span class="pat">__</span>, 
				<span class="pat">valuelist</span>, <span class="pat">__</span>, 
				<span class="str">')'</span>, <span class="pat">__</span>, 
				<span class="pat">scolon</span>;</p>
			<p><span class="pat">program</span> =   {   <span class="pat">sentence</span>  };</p>
			<p><span class="pat">sentence</span> = 
				   <span class="pat">vardef</span><!-- def -->    |
				   <span class="pat">syndef</span><!-- syntax --> | 
				   <span class="pat">vardel</span><!-- del -->    | 
				   <span class="pat">scolon</span><!-- scl -->    | 
				   <span class="pat">resblc</span><!-- bLOCK -->  | 
				   <span class="pat">infixl</span><!-- infl -->   |
				   <span class="pat">infixr</span><!-- infr -->   |
				   <span class="pat">spaces</span><!-- spac -->   |
				   <span class="pat">block2</span><!-- block2 --> |
				   <span class="pat">comment</span><!-- comm -->  |
				   <span class="pat">pragma</span><!-- pragma --> |
				   <span class="pat">funcdef</span><!-- func_def --> |
				   <span class="pat">operdef</span><!-- op_def --> |
				   <span class="pat">funccall</span><!-- func_call --> |
				   <span class="pat">syncall</span><!-- syntax_call --> |
				   <span class="pat">opcall1</span><!-- op_call1 --> |
				   <span class="pat">opcall2</span><!-- op_call2 --> |
				   <span class="pat">opcall3</span><!-- op_call3 --> |
				   <span class="pat">opcall4</span><!-- op_call4 --> |
				   <span class="pat">opcall5</span>;<!-- op_call5 --> </p>
			<!--
		
			-->
		</div>
		
	</div>

	
	
	
</div>


	</body></html>