<!DOCTYPE html>
<html lang="ja">
<head>
<meta charset="UTF-8">
<title>Rationales behind CamphorScript</title>
<link rel="stylesheet" type="text/css" href="files/utility.css">
<style type="text/css">
.box{border: 1px solid green;float: left;}
.container2{width: inherit; overflow:scroll}
.container{zoom: 1; width: 6000px;}
.container:before, .container:after{content: ""; display: table;}
.container:after{clear: both;}
</style>
<script src="files/jquery-3.1.1.min.js" type="text/javascript"></script>
<script src="files/main.js"></script>
</head>
<body style="background-color:white;">
<h2>Rationales behind CamphorScript</h2>
<!--<h3>0. 序文</h3>
<hr>
<pre>
2年半前に書いた仕様書を読んだところ、当時の私が伝えたかったことが一切伝わっておらず、工夫したところとかも一切伝わらず、私の脳内の暗黙の前提のまま全てが流されてしまっていることが確認できました。これはひどい。
そもそもBrainf*ckでプログラムを書く上で一定のイディオムがあり、そのことを隠蔽しながら直感的にBrainf*ckが書けるようにと様々な仕様を開発したのに、肝心のそのイディオムの説明をしていないので救いようがないですね
ということでやっていきましょう。まあ2年半前だがそれなりには覚えてることでしょう
まずは何も考えずに文字を吐き出していくところからですな。文章の体裁を整えるのは後でよかろう
さて、それではやっていきましょう
</pre>-->
<h3>1. そもそもBrainf*ckは何が問題なの？</h3>
<hr>
<pre>
散々難読プログラミング言語だと言われるBrainf*ckだが、難読言語の割には直感的に理解もしやすく、内容も簡単な言語である。
とはいえ、その機能の少なさにより簡単なことをするにも様々なイディオムが必要となること、
そしてそれらを関数化することができないのでいちいち覚えて毎回毎回書かなければならないことが問題である。
あと、メモリを変数として抽象化できず、メモリとして扱わなければいけないことも問題。
要するに、「ライブラリの作成」を拒む設計になっているのが問題だ。

ということで、上記のもろもろができて、しかもまともな効率の良いBrainf*ckコードを吐き出せるような言語が作りたいなーと思って作り始めたわけだ。
つまり、Brainf*ckコードの思想を残しながら、イディオムを隠蔽し直感的にコーディングができる代物を作りたいと考えた。
私はJavaScriptとかCとかで今までコードを書いてきているし、そんな感じの見た目の言語でかけたらいいよねってことで構文はCっぽく設計。
変数宣言によりメモリを抽象化ができるし、Cのようにブロックの先頭で行う必要はない。
さらに、brainとf*ckなとどいうゲルマン系の荒々しい<sup>[独自研究]</sup>単語を廃した名前にしたいと考えた。
そこで、そういや「樟脳」に「脳」の字があることだし、CamphorScriptって名前にすればいいんじゃないかなと思い、開発を始めたのである。
あと、Cとかだと普通作れるのは「関数」、C++でも「演算子のオーバーロード」までしか行けないけど、後述の理由により、Haskellをパクッて演算子が自由に自作できるようにも設計した。
さらに、制御構文とかまで自作できるようにしようと考えた。Brainf*ckではifを書くのにさえイディオムが要るので。

現状の最大の問題点としては、配列とかにはまだ対応できていないことがある。

結論：
・Cっぽい見た目
・高い拡張性（できるだけライブラリに委任する）
</pre>

<h3>2. CamphorScript概略</h3>
<hr>
<pre>
まずは見た目から。
C譲りのフリーフォーマットであって、改行やら空白やらはどこにでも入れられる。ただ、当然<code>char</code>を<code>ch ar</code>と書いたり、<code>char a</code>を<code>chara</code>と書くことはできない。
<u>ただし、演算子だけは例外である。</u><code>+=</code>を<code>+ =</code>と表記することは、<u>Cなどとは異なり<b>許される。</b></u>そういう設計にした理由は後述する。

まず、Brainf*ckを吐き出せる以上、8命令のどれにも対応する処理が存在しなければならないはずだ。
とはいえ、メモリの管理を変数に委託していることで、<code>&lt;</code>と<code>&gt;</code>は不要となる。
<code>+</code>と<code>-</code>については、<code>+=</code>と<code>-=</code>という演算子を組み込むことで解決した。当然左オペランドは変数、右オペランドは定数である。Brainf*ckにおいて<code>++++++++</code>と表されるコードは、普通に<code>a+=8;</code>と表現される。
なお、いちいち<code>char a; a += 8;</code>と書くのは鬱陶しいので、<code>char a = 8;</code>と書けるようにしてある。
なお、これは<code>char a; a=8;</code>とは異なる意味なので注意が必要である。挙動は同じだが。

<code>.</code>と<code>,</code>はそれぞれ<code>write()</code>と<code>read()</code>という組み込み関数。引数は変数。
さて、最大の問題児が<code>[</code>と<code>]</code>である。特に、逆翻訳時に問題を起こす。
現状のCamphorScriptでは、<code>[</code>と<code>]</code>の中に<code>&lt;</code>と<code>&gt;</code>が同数入っているときのみ、逆翻訳を受け付ける。そうでなければエラーを吐く。
それにはそれなりの理由がある。配列に対応できてないのもこれが原因だが、そもそも現状のCamphorScriptはあくまでアドレスを変数として抽象化するにとどまっている。
ループでアドレスがズレられると、当然困るというわけだ。

さて、メモリを変数として抽象化するということは、どうせなら色々実現したい機能というのもあるわけだ。特に、メモリの再利用は実装したい。
逆に言うと、Brainf*ckにおいて同一メモリを時間で切り分けて用いるなんて日常茶飯事だが、高級言語みを出すにはやっぱりシステムの側でリサイクルできるようにしないとということである。

Cなら普通に「使い終わった変数は放置」という方針で構わんだろう。しかし、今相手にしているのはCamphorScript。未使用メモリは0であることが期待される。
だからこその<code>delete</code>である。<code>delete</code>は中身が0であることをプログラマ側が保証してからでないと使ってはいけないが、それはつまりこういうことである。

なお、変数のスコープはブロックスコープである。ブロック内で宣言した変数はブロック外からは参照できない…というだけなら普通の言語と同じだが、CamphorScriptはもう一ひねりある。
「ブロック内で宣言した変数は、ブロック内で<code>delete</code>しないとコンパイルエラー」という仕様になっているのだ。
まあこれはメモリを浪費しないためのある意味当然の仕様である。


関数。お分かりのとおり、Brainf*ckに関数やサブルーチンなどというものは無いわけで、関数は全て（組み込みを除いて）マクロとして実現されている。
さて、マクロを使うと疑似的に参照渡しができるのはあまりにも有名な話である。Cのswapマクロを思い出していただければわかるだろう。
そこで考えた。Brainf*ckではお呼びでない「型システム」を、マクロの特性を表現するために濫用できないだろうか？と。
ということでできたのが<code>char&amp;</code>と<code>constant char</code>である。
</pre>
<table>
<tr><td>仮引数の型</td><td>真引数</td></tr>
<tr><td><code>char&amp;</code></td><td>変数</td></tr>
<tr><td><code>constant char</code></td><td>定数</td></tr>
</table>
<pre>具体的には、関数は次のように記述する。</pre>
<table><tr><td><pre class="codes">
void clear(char& a) {
	while(a){a-=1;}
}
</pre></td></tr></table><pre>（この関数は<code>&lt;stdcalc&gt;</code>ライブラリにて既に実装済み）

この関数を定義したうえで、<code>clear(b);</code>と書くと、（CCS→HCCSのときに）<code>{ while(b){b-=1;} }</code>と変換される。
要するに、結局はマクロである。


関数内で新しい変数宣言をすることも可能である。しかし、その場合にも制約がある。
Cの場合、関数内で宣言された変数の実体はコールスタック上に取られる領域である。
しかし、CamphorScriptやBrainf*ckにコールスタックなどというものはないし、そもそも関数やサブルーチンではなくマクロである。
ということで、当然ではあるが、「先頭で新たな変数を定義し、終わりで全て<code>delete</code>する」ことによって代用とする。
関数はブロックに展開されるので、内部で宣言した変数にも同様の扱いが必要ということである。
<span style="font-size: 70%">というか、現状だと「関数宣言の時点ではdeleteがないことは検出されず、ブロックに展開された時に初めて検出され、コンパイルエラーとなる」というクソ仕様である。これはクソなので直さねばならない。</span>



さて、演算子だが、これはちょっと特殊な仕様になっている。
そもそもCamphorScriptはあくまでBrainf*ckでのプログラミングを補助するための存在であり、決してCのサブセットをBrainf*ckでエミュレートするためのものではない。
故に、C的要素はBrainf*ckのイディオムを体現するために用いるべきであって、決してCなどのイディオムをBrainf*ckに持ち込むために用いるべきではない。


さて、Brainf*ckで頻出<sup>[独自研究]</sup>するイディオム（に相当するCamphorScript）に、次のようなものがある。
</pre>
<table><tr><td><pre class="codes">
while(a){
	a-=1;
	b+=1;
	c+=1;
}
</pre></td></tr></table>
<pre>
これは、結果として「aの値を破壊し0にしながら、bとcにaの値を加える」という操作を意味する。つまり、Cなら普通以下のように書く操作である。
</pre>
<table><tr><td><pre class="codes">
b+=a;
c+=a;
a=0;
</pre></td></tr></table>
<pre>
しかし、これはあくまでCのやり方である。Cにおいて空気のように自然な<code>b+=a;</code>という処理は、Brainf*ckではそれほど自然な考え方ではない。
それどころか、Cの<code>b+=a;</code>をBrainf*ckで再現するには、その部分として上記の<code>while(a){ a-=1; b+=1; c+=1; }</code>を含んだコードを書く必要がある。
故に、<code>while(a){ a-=1; b+=1; c+=1; }</code>を<code>b+=a; c+=a; a=0;</code>と表現するわけにはいかない。

まずは、一行減った
</pre>
<table><tr><td><pre class="codes">
while(a){
	a-=1;
	b+=1;
}
</pre></td></tr></table>
<pre>
を考えよう。Cの<code>b+=a; a=0;</code>というコードだが、これを当然1つの式として表すべきである。
もちろん、<code>clear_the_first_and_add_to_the_second(a,b);</code>という関数とすれば解決される問題ではあるが、
このような長い関数名はどう考えても実用的でも直感的でもない。故に、Haskellをパクり、演算子を自作できるようにしたのである。

私は、この演算子に<code>+=~</code>という名前を与えた。<code>b +=~ a</code>という風に用いる。この<code>~</code>はビット演算的な意味ではなく、C++のデストラクタの<u><b>ニュアンス</b></u>を表すものである。
<code>b+=a</code>を行いながら、同時にaが壊されていくというニュアンスを表現しようと思ったのである。
なお、演算子として使える文字は、<code>!%&*+,-:<=>?@^/|~</code>である。


さて、具体的な宣言の書き方について説明する。結論から言うと、以下のような形になる。</pre>
<table><tr><td><pre class="codes">
void (+=~)(char&amp;b<strong style="font-size:large;color:red">;</strong>char&amp;a){
	while(a){b+=1;a-=1;}
}
</pre></td></tr></table>
<pre>
引数の区切りはコンマではなく、セミコロンである。これは重要なところである。理由は後ほど判明する。
ちなみに、宣言の形に合わせ、<code>(+=~)(b;a);</code>とも呼べる仕様になっている。使い道があるかどうかは知らん。
また、CamphorScriptでは演算子中にスペースを入れることを許容している。これは、<code>a+= ~b</code>という表記をすることで、
あたかも<code>~b</code>が「bを破壊しながらbの元の値を返す演算子」であってその結果を<code>a+=</code>しているかのように見せることができるようにするためである。

こいつを説明したところで、次に<code>while(a){ a-=1; b+=1; c+=1;}</code>を説明していく。
これまた、<code>clear_the_first_and_add_to_the_second_and_to_the_third(a,b,c);</code>という関数名にはしたくないわけであるが、今度は3引数。2項演算子では当然扱えない。
じゃあどうするか？答えは簡単。「こういうのも演算子で扱えるように文法を拡張する」のである。

<code>&lt;eq_til&gt;</code>ライブラリ内での実際の定義を見てみよう。
</pre>
<table><tr><td><pre class="codes">
void (+=~)(char& a<strong style="font-size:large;color:blue">,</strong>char& b<strong style="font-size:large;color:red">;</strong>char& z){
	while(z){a+=1;b+=1;z-=1;}
}	/* (a,b)+= ~z*/
</pre></td></tr></table>
<pre>
なんと、区切りの文字にコンマとセミコロンの両方が使われている。どういうことだろうか。
下のコメントを見ると、<code>(a,b)+= ~z</code>と書いてある。実際、この書き方をすると上手く動く。
以下、そのからくりを解説する。

まず、演算子の結合性について説明する。
<code>&lt;fixdecl&gt;</code>ライブラリに、以下のような宣言がある。
<code>infixl  0 (,); infixr  5 (+=~);</code>
<code>infixl</code>, <code>infixr</code>はHaskellからパクった仕様であり、左結合・右結合を指定する。
数値が大きい方が結合性が高い。Haskellとは異なり、演算子の前後にはカッコを必要とし、また数値には任意の非負整数を指定することができる。


さて、CamphorScriptの演算子呼び出しにおいては、「文中で最も優先順位の低い演算子に対応する定義が参照される」というルールがある<span style="font-size: 70%">…はずなのだが挙動がちょっとよく分からないことになってるなどうしよう</span>


また、以上のように定義されているので、組み込みの<code>read</code>や<code>write</code>は<code>char&amp;</code>を引数とする関数であり、
組み込みの演算子<code>+=</code>や<code>-=</code>は左オペランドが<code>char&amp;</code>、右オペランドが<code>constant char</code>である演算子として捉えることができる。
ユーザー側は、これらの演算子が言語に組み込みのものであるかライブラリによって提供されるものなのかという差をほとんど意識することなく、コードが書けるようになっている。
演算子も関数もオーバーロードできることから、</pre><table><tr><td><pre class="codes">
void (+=)(char& a;char& b){
	char c2;
	while(b){a+=1;c2+=1;b-=1;}
	while(c2){b+=1;c2-=1;}
	delete c2;
}
</pre></td></tr></table><pre>というコードを書いてやれば、（<code>&lt;stdcalc&gt;</code>ライブラリにて既に実装済み）ユーザ側は<code>a+=b;</code>と<code>a+=3;</code>との間に差を覚えずにコードを書くことさえ可能である。
（勿論、Brainf*ckに翻訳したときの実体は大きく異なるので、実際は差を意識してコードを書くべきだが。）

ということで<sup>[どういうことで？]</sup>、仮引数の型として<code>const char</code>というのも用意してある。これは、<code>constant char</code>と<code>char&amp;</code>の両方を受け取れる仮引数の型である。
内部実装としては、<code>constant char</code>の場合と<code>char&amp;</code>の場合の関数(or演算子)が両方宣言されるという仕様になっていたはずである<sup>[要検証]</sup>。<span style="font-size: 70%">2年半前に実装したものの詳細なんて覚えてるわけないし、どこを調べれば答えが書いてあるかも知らない</span>
</pre>
<h3>3. 全体像</h3>
<hr>
<pre>
全体像は、このようになっている。
</pre>
<table><tr><td>コンパイル：</td></tr>
<tr><td><pre>
CamphorScript(CS)
 *↓Step1(C的マクロ展開)     			{- C macro expansion -}
PreprocessedCamphorScript(PCS)
 *↓Step2(関数的マクロ展開)  			{- Functional macro expansion -}
Half-CompiledCamphorScript(HCCS)
 *↓Step3-I(糖衣構文プリプロセス)			{- Desugaring -}
CompiledCamphorScript(CCS)
 *↓Step3-II(逐語訳&ブロック削除)		{- translation -}<!--nouLittle
 ?↓Step5(メモリ割り当て)				{- memory allocation -}
nouMore
 ?↓Step6(定数最適化)					{- (in|de)crement optimization -}-->
nouDarake
 *↓Step7(記号化)         			{- symbolization -}
Brainf*ck_spaced
 *↓Step8(空白削除)       			{- comment deletion -}
Brainf*ck_compressed
</pre></td></tr></table>
<table><tr><td>逆コンパイル：</td></tr>
<tr><td><pre>
Brainf*ck
  ↓Step8(空白追加)       			{- indentation -}
  ↓Step7(非記号化)       			{- desymbolization -}
nouDarake
  ↓Step654(逐語訳)       			{- reverse translation -}
CompiledCamphorScript
</pre></td></tr></table>
<pre>
Stepの数字が飛んでいるのは、空いている番号のところに将来処理を追加する予定だからである。
さて、百聞は一見に如かずというし、CamphorScriptが順にどうやって変換されていくかを見ていこう。（例として、サンプルファイル内の<code>xShow</code>を用いる）
</pre>
<button>表示/非表示を切り替え</button>
<div class="container2">
<div class="container">
<div class="box"><table><tr><td>CamphorScript</td></tr><tr><td/><pre class="codes">
#include &lt;stdcalc&gt;
#include &lt;div&gt;
char a;char b; char c; char d;
read(a);
b += 48; c += 48; d += 48;
sprint(b,c,d + &lt;-~ a);
write(b);write(c);write(d);
</pre></td></tr></table></div>
<div class="box"><table><tr><td>PreprocessedCamphorScript （冗長な空行やコメントを削除し掲載）</td></tr><tr><td><pre class="codes">
/*# LINE start &quot;lib\\stdcalc.txt&quot; #*/
/*# LINE start &quot;lib\\fixdecl.txt&quot; #*/
infixl  0 (,);
infixr  5 (=);    infixr  5 (+=);  infixr  5 (-=); 
infixr  5 (=~);   infixr  5 (+=~); infixr  5 (-=~);
infixr  5 (+=!~); infixr  5 (=!~); infixr  5 (-|=); infixr 5 (-|=~);
infixl 35 (+); infixl 35 (-) ; infixl 35 (+~); infixl 35 (-~) ;
infixl 40 (*); infixl 40 (%) ; infixl 40 (*~) ; 
infixl 40 (/) ; infixl 40 (/~) ;    
/*# LINE end   &quot;lib\\fixdecl.txt&quot; #*/
void clear(char&amp;a) {
	while(a){a-=1;}
}
void (=)(char&amp;a;constant char N){
	clear(a);a+=N;
}
/*# LINE start &quot;lib\\eq_til.txt&quot; #*/
/*# LINE start &quot;lib\\fixdecl.txt&quot; #*/
/*# LINE end   &quot;lib\\fixdecl.txt&quot; #*/
void (+=~)(char&amp;a;char&amp;z){
	while(z){a+=1;z-=1;}
}	
void (+=~)(char&amp;a,char&amp;b;char&amp;z){
	while(z){a+=1;b+=1;z-=1;}
}	
void (+=~)(char&amp;a;char&amp;z *constant char N){
	while(z){a+=N;z-=1;}
}	
void (-=~)(char&amp;a;char&amp;z){
	while(z){a-=1;z-=1;}
}	
void (-=~)(char&amp;a,char&amp;b;char&amp;z){
	while(z){a-=1;b-=1;z-=1;}
}	
void (-=~)(char&amp;a;char&amp;z *constant char N){
	while(z){a-=N;z-=1;}
}	
void (=~)(char&amp;a;char&amp;z){
	clear(a);
	a+=~z;
}	
void (=~)(char&amp;a,char&amp;b;char&amp;z){
	clear(a);clear(b);
	(a,b)+=~z;
}	
void (=~)(char&amp;a;char&amp;z *constant char N){
	clear(a);
	a+=~z*N;
}	
/*# LINE end   &quot;lib\\eq_til.txt&quot; #*/
/*# LINE start &quot;lib\\eq_bang_til.txt&quot; #*/
/*# LINE start &quot;lib\\fixdecl.txt&quot; #*/
/*# LINE end   &quot;lib\\fixdecl.txt&quot; #*/
void (+=!~)(char&amp;a;char&amp;z){
	a+=1;
	while(z){clear(z);a-=1;}
}	
void (+=!~)(char&amp;a,char&amp;b;char&amp;z){
	a+=1; b+=1;
	while(z){clear(z);a-=1;b-=1;}
}	
void (=!~)(char&amp;a;char&amp;z){
	clear(a); a+=!~z;
}	
void (=!~)(char&amp;a,char&amp;b;char&amp;z){
	clear(a); clear(b); (a,b)+=!~z;
}	
/*# LINE end   &quot;lib\\eq_bang_til.txt&quot; #*/
void (+=)(char&amp;a;char&amp;b){
	char c2;
	(a,c2)+=~b;
	b+=~c2;
	delete c2;
}
void (+=)(char&amp;a;constant char N *~char&amp;z){
	while(z){a+=N;z-=1;}
}	
void (-|=~)(char&amp;a;char&amp;b){
	char c2;char d2;
	while(b)
	{
		(c2,d2)+=~a;
		   a +=~d2;
		while(c2){
			clear(c2);
			a-=1;
		}
		b-=1;
	}
	delete c2;delete d2;
}
/*# LINE end   &quot;lib\\stdcalc.txt&quot; #*/
/*# LINE start &quot;lib\\div.txt&quot; #*/
/*# LINE start &quot;lib\\stdcalc.txt&quot; #*/
/*# LINE end   &quot;lib\\stdcalc.txt&quot; #*/
infixr 5 (+&lt;-~); infixr 5 (+&lt;--~); infixr 5 (&lt;-~); infixl 40 (/); infixr 5 (-|=);
void (-|=) (char&amp;a; const char N)
{
	char b; b+=N;
	a -|=~b;
	delete b;
}
void (+=)(char&amp;a,char&amp;b;char&amp;c){
	char d; 
	d +=c;
	(a,b) +=~d;
	delete d;
}
void (+&lt;-~) (char&amp;quot,char&amp;rem; char&amp;a /const char N)
{
	char orig; char new_; char not_; char tmp; char tmp2;
	while(a)
	{
		/*# MEMORY using tmp #*/ orig +=a;  
		/*# MEMORY using tmp #*/ a -|=N;  
		/*# MEMORY using tmp #*/(tmp2,new_) +=a; 
		not_ +=!~tmp2;  
		
		while(new_){clear(new_); quot+=1;} 
		while(not_){not_-=1; rem+=orig;} 
		clear(orig);
	}
	delete orig; delete new_; delete not_; delete tmp; delete tmp2;
}
void sprint(char&amp;x1,char&amp;x2,char&amp;x3 +&lt;-~char&amp;a)
{
	char k;
	(k,x3)+&lt;-~a/10;
	(x1,x2)+&lt;-~k/10;
	delete k;
}
void (+&lt;--~) (char&amp;quot,char&amp;rem; char&amp;a /const char N)
{
	char orig; char a3; char not_; char tmp; char a2;
	while(a)
	{
		(tmp,orig) +=~a; a +=~tmp;
		a -|=N;
		(a2,a3) +=a;
		
		not_ +=1;
		while(a2){clear(a2); quot+=1;}
		while(a3){clear(a3); clear(not_);}		
		while(not_){not_-=1; rem+=orig;} 
		clear(orig);
	}
	delete orig; delete a3; delete not_; delete tmp; delete a2;
}
/*# LINE end   &quot;lib\\div.txt&quot; #*/
char a;char b; char c; char d;
read(a);
b +=48; c +=48; d +=48;
sprint(b,c,d +&lt;-~a);
write(b);write(c);write(d);
</pre></td></tr></table></div>
<div class="box"><table><tr><td>Half-CompiledCamphorScript （冗長な空行やコメントを削除し掲載）</td></tr><tr><td><pre class="codes">
/*# LINE start "lib\\stdcalc.txt" #*/
/*# LINE start "lib\\fixdecl.txt" #*/
/*# LINE end "lib\\fixdecl.txt" #*/
/*# LINE start "lib\\eq_til.txt" #*/
/*# LINE start "lib\\fixdecl.txt" #*/
/*# LINE end "lib\\fixdecl.txt" #*/
/*# LINE end "lib\\eq_til.txt" #*/
/*# LINE start "lib\\eq_bang_til.txt" #*/
/*# LINE start "lib\\fixdecl.txt" #*/
/*# LINE end "lib\\fixdecl.txt" #*/	
/*# LINE end "lib\\eq_bang_til.txt" #*/
/*# LINE end "lib\\stdcalc.txt" #*/
/*# LINE start "lib\\div.txt" #*/
/*# LINE start "lib\\stdcalc.txt" #*/
/*# LINE end "lib\\stdcalc.txt" #*/
/*# LINE end "lib\\div.txt" #*/
char a;char b; char c; char d;
read(a);
b+=48; c+=48; d+=48;
{
	char k__TMP_1;
	{
	char orig__TMP_1; char new___TMP_1; char not___TMP_1; char tmp__TMP_1; char tmp2__TMP_1;
	while(a){
		assert_zero tmp__TMP_1; {
	char c2__TMP_1;
	{
	while(a){orig__TMP_1+=1;c2__TMP_1+=1;a-=1;}
}
	{
	while(c2__TMP_1){a+=1;c2__TMP_1-=1;}
}
	delete c2__TMP_1;
}  
		assert_zero tmp__TMP_1; {
	char b__TMP_1; b__TMP_1+=10;
	{
	
	char c2__TMP_1;char d2__TMP_1;
	while(b__TMP_1){
		{
	while(a){c2__TMP_1+=1;d2__TMP_1+=1;a-=1;}
}
		   {
	while(d2__TMP_1){a+=1;d2__TMP_1-=1;}
}
		while(c2__TMP_1){
			{
	while(c2__TMP_1){c2__TMP_1-=1;}
}
			a-=1;
		}
		b__TMP_1-=1;
	}
	delete c2__TMP_1;delete d2__TMP_1;
}
	delete b__TMP_1;
}  
		assert_zero tmp__TMP_1;{
	char d__TMP_1; 
	{
	char c2__TMP_1;
	{
	while(a){d__TMP_1+=1;c2__TMP_1+=1;a-=1;}
}
	{
	while(c2__TMP_1){a+=1;c2__TMP_1-=1;}
}
	delete c2__TMP_1;
}
	{
	while(d__TMP_1){tmp2__TMP_1+=1;new___TMP_1+=1;d__TMP_1-=1;}
}
	delete d__TMP_1;
} 
		{
	not___TMP_1+=1;
	while(tmp2__TMP_1){{
	while(tmp2__TMP_1){tmp2__TMP_1-=1;}
}not___TMP_1-=1;}
}  
		while(new___TMP_1){{
	while(new___TMP_1){new___TMP_1-=1;}
} k__TMP_1+=1;} 
		while(not___TMP_1){not___TMP_1-=1; {
	char c2__TMP_1;
	{
	while(orig__TMP_1){d+=1;c2__TMP_1+=1;orig__TMP_1-=1;}
}
	{
	while(c2__TMP_1){orig__TMP_1+=1;c2__TMP_1-=1;}
}
	delete c2__TMP_1;
}} 
		{
	while(orig__TMP_1){orig__TMP_1-=1;}
}
	}
	delete orig__TMP_1; delete new___TMP_1; delete not___TMP_1; delete tmp__TMP_1; delete tmp2__TMP_1;
}
	{
	char orig__TMP_1; char new___TMP_1; char not___TMP_1; char tmp__TMP_1; char tmp2__TMP_1;
	while(k__TMP_1){
		assert_zero tmp__TMP_1; {
	char c2__TMP_1;
	{
	while(k__TMP_1){orig__TMP_1+=1;c2__TMP_1+=1;k__TMP_1-=1;}
}
	{
	while(c2__TMP_1){k__TMP_1+=1;c2__TMP_1-=1;}
}
	delete c2__TMP_1;
}  
		assert_zero tmp__TMP_1; {
	char b__TMP_1; b__TMP_1+=10;
	{
	
	char c2__TMP_1;char d2__TMP_1;
	while(b__TMP_1){
		{
	while(k__TMP_1){c2__TMP_1+=1;d2__TMP_1+=1;k__TMP_1-=1;}
}
		   {
	while(d2__TMP_1){k__TMP_1+=1;d2__TMP_1-=1;}
}
		while(c2__TMP_1){
			{
	while(c2__TMP_1){c2__TMP_1-=1;}
}
			k__TMP_1-=1;
		}
		b__TMP_1-=1;
	}
	delete c2__TMP_1;delete d2__TMP_1;
}
	delete b__TMP_1;
}  
		assert_zero tmp__TMP_1;{
	char d__TMP_1; 
	{
	char c2__TMP_1;
	{
	while(k__TMP_1){d__TMP_1+=1;c2__TMP_1+=1;k__TMP_1-=1;}
}
	{
	while(c2__TMP_1){k__TMP_1+=1;c2__TMP_1-=1;}
}
	delete c2__TMP_1;
}
	{
	while(d__TMP_1){tmp2__TMP_1+=1;new___TMP_1+=1;d__TMP_1-=1;}
}
	delete d__TMP_1;
} 
		{
	not___TMP_1+=1;
	while(tmp2__TMP_1){{
	while(tmp2__TMP_1){tmp2__TMP_1-=1;}
}not___TMP_1-=1;}
}  
		while(new___TMP_1){{
	while(new___TMP_1){new___TMP_1-=1;}
} b+=1;} 
		while(not___TMP_1){not___TMP_1-=1; {
	char c2__TMP_1;
	{
	while(orig__TMP_1){c+=1;c2__TMP_1+=1;orig__TMP_1-=1;}
}
	{
	while(c2__TMP_1){orig__TMP_1+=1;c2__TMP_1-=1;}
}
	delete c2__TMP_1;
}} 
		{
	while(orig__TMP_1){orig__TMP_1-=1;}
}
	}
	delete orig__TMP_1; delete new___TMP_1; delete not___TMP_1; delete tmp__TMP_1; delete tmp2__TMP_1;
}
	delete k__TMP_1;
}
write(b);write(c);write(d);
</pre></td></tr></table></div>
<div class="box"><table><tr><td>CompiledCamphorScript （冗長削除）</td></tr><tr><td><pre class="codes">



char a;char b; char c; char d;
read(a);
b+=48; c+=48; d+=48;
{
	char k__TMP_1;
	{
		char orig__TMP_1; char new___TMP_1; char not___TMP_1; char tmp__TMP_1; char tmp2__TMP_1;
		while(a){
			assert_zero tmp__TMP_1; {
				char c2__TMP_1;
				{
					while(a){orig__TMP_1+=1;c2__TMP_1+=1;a-=1;}
				}
				{
					while(c2__TMP_1){a+=1;c2__TMP_1-=1;}
				}
				delete c2__TMP_1;
			}  
			assert_zero tmp__TMP_1; {
				char b__TMP_1; b__TMP_1+=10;
				{
					
					char c2__TMP_1;char d2__TMP_1;
					while(b__TMP_1){
						{
							while(a){c2__TMP_1+=1;d2__TMP_1+=1;a-=1;}
						}
						{
							while(d2__TMP_1){a+=1;d2__TMP_1-=1;}
						}
						while(c2__TMP_1){
							{
								while(c2__TMP_1){c2__TMP_1-=1;}
							}
							a-=1;
						}
						b__TMP_1-=1;
					}
					delete c2__TMP_1;delete d2__TMP_1;
				}
				delete b__TMP_1;
			}  
			assert_zero tmp__TMP_1;{
				char d__TMP_1; 
				{
					char c2__TMP_1;
					{
						while(a){d__TMP_1+=1;c2__TMP_1+=1;a-=1;}
					}
					{
						while(c2__TMP_1){a+=1;c2__TMP_1-=1;}
					}
					delete c2__TMP_1;
				}
				{
					while(d__TMP_1){tmp2__TMP_1+=1;new___TMP_1+=1;d__TMP_1-=1;}
				}
				delete d__TMP_1;
			} 
			{
				not___TMP_1+=1;
				while(tmp2__TMP_1){{
						while(tmp2__TMP_1){tmp2__TMP_1-=1;}
					}not___TMP_1-=1;}
			}  
			
			while(new___TMP_1){{
					while(new___TMP_1){new___TMP_1-=1;}
				} k__TMP_1+=1;} 
			while(not___TMP_1){not___TMP_1-=1; {
					char c2__TMP_1;
					{
						while(orig__TMP_1){d+=1;c2__TMP_1+=1;orig__TMP_1-=1;}
					}
					{
						while(c2__TMP_1){orig__TMP_1+=1;c2__TMP_1-=1;}
					}
					delete c2__TMP_1;
				}} 
			{
				while(orig__TMP_1){orig__TMP_1-=1;}
			}
		}
		delete orig__TMP_1; delete new___TMP_1; delete not___TMP_1; delete tmp__TMP_1; delete tmp2__TMP_1;
	}
	{
		char orig__TMP_1; char new___TMP_1; char not___TMP_1; char tmp__TMP_1; char tmp2__TMP_1;
		while(k__TMP_1){
			assert_zero tmp__TMP_1; {
				char c2__TMP_1;
				{
					while(k__TMP_1){orig__TMP_1+=1;c2__TMP_1+=1;k__TMP_1-=1;}
				}
				{
					while(c2__TMP_1){k__TMP_1+=1;c2__TMP_1-=1;}
				}
				delete c2__TMP_1;
			}  
			assert_zero tmp__TMP_1; {
				char b__TMP_1; b__TMP_1+=10;
				{
					
					char c2__TMP_1;char d2__TMP_1;
					while(b__TMP_1){
						{
							while(k__TMP_1){c2__TMP_1+=1;d2__TMP_1+=1;k__TMP_1-=1;}
						}
						{
							while(d2__TMP_1){k__TMP_1+=1;d2__TMP_1-=1;}
						}
						while(c2__TMP_1){
							{
								while(c2__TMP_1){c2__TMP_1-=1;}
							}
							k__TMP_1-=1;
						}
						b__TMP_1-=1;
					}
					delete c2__TMP_1;delete d2__TMP_1;
				}
				delete b__TMP_1;
			}  
			assert_zero tmp__TMP_1;{
				char d__TMP_1; 
				{
					char c2__TMP_1;
					{
						while(k__TMP_1){d__TMP_1+=1;c2__TMP_1+=1;k__TMP_1-=1;}
					}
					{
						while(c2__TMP_1){k__TMP_1+=1;c2__TMP_1-=1;}
					}
					delete c2__TMP_1;
				}
				{
					while(d__TMP_1){tmp2__TMP_1+=1;new___TMP_1+=1;d__TMP_1-=1;}
				}
				delete d__TMP_1;
			} 
			{
				not___TMP_1+=1;
				while(tmp2__TMP_1){{
						while(tmp2__TMP_1){tmp2__TMP_1-=1;}
					}not___TMP_1-=1;}
			}  
			
			while(new___TMP_1){{
					while(new___TMP_1){new___TMP_1-=1;}
				} b+=1;} 
			while(not___TMP_1){not___TMP_1-=1; {
					char c2__TMP_1;
					{
						while(orig__TMP_1){c+=1;c2__TMP_1+=1;orig__TMP_1-=1;}
					}
					{
						while(c2__TMP_1){orig__TMP_1+=1;c2__TMP_1-=1;}
					}
					delete c2__TMP_1;
				}} 
			{
				while(orig__TMP_1){orig__TMP_1-=1;}
			}
		}
		delete orig__TMP_1; delete new___TMP_1; delete not___TMP_1; delete tmp__TMP_1; delete tmp2__TMP_1;
	}
	delete k__TMP_1;
}
write(b);write(c);write(d);
</pre></td></tr></table></div>
<div class="box"><table><tr><td>nouDarake （微編集）</td></tr><tr><td><pre class="codes">



      
mov 0; _input; 
mov 1; inc 48;  mov 2; inc 48;  mov 3; inc 48; 
 
	         
		mov 0; loop;    
				mov 0; loop; mov 5; inc 1; mov 10; inc 1; mov 0; dec 1; mov 0; pool;  
				
				mov 10; loop; mov 0; inc 1; mov 10; dec 1; mov 10; pool;  
				
				 
			 
			    mov 10; inc 10; 
				  
					mov 10; loop; mov 0; loop; mov 11; inc 1; mov 12; inc 1; mov 0; dec 1; mov 0; pool;  
						
						mov 12; loop; mov 0; inc 1; mov 12; dec 1; mov 12; pool;  
						
						mov 11; loop; mov 11; loop; mov 11; dec 1; mov 11; pool;  
							
							mov 0; dec 1; 
						mov 11; pool;  
						mov 10; dec 1; 
					mov 10; pool;  
					  
				
				 
			  
			   
				 
					mov 0; loop; mov 10; inc 1; mov 11; inc 1; mov 0; dec 1; mov 0; pool;  
					
					mov 11; loop; mov 0; inc 1; mov 11; dec 1; mov 11; pool;  
					
					 
				
				mov 10; loop; mov 9; inc 1; mov 6; inc 1; mov 10; dec 1; mov 10; pool;  
				
				 
			 
			mov 7; inc 1; 
				mov 9; loop; mov 9; loop; mov 9; dec 1; mov 9; pool;  
					mov 7; dec 1; mov 9; pool;  
			  
			
			mov 6; loop; mov 6; loop; mov 6; dec 1; mov 6; pool;  
				 mov 4; inc 1; mov 6; pool;  
			mov 7; loop; mov 7; dec 1;   
					mov 5; loop; mov 3; inc 1; mov 10; inc 1; mov 5; dec 1; mov 5; pool;  
					
					mov 10; loop; mov 5; inc 1; mov 10; dec 1; mov 10; pool;  
					
					 
				mov 7; pool;   
			mov 5; loop; mov 5; dec 1; mov 5; pool;  
			
		mov 0; pool;  
		         
	
	         
		mov 4; loop;    
				mov 4; loop; mov 5; inc 1; mov 10; inc 1; mov 4; dec 1; mov 4; pool;  
				
				mov 10; loop; mov 4; inc 1; mov 10; dec 1; mov 10; pool;  
				
				 
			  
			    mov 10; inc 10; 
				  
					mov 10; loop; mov 4; loop; mov 11; inc 1; mov 12; inc 1; mov 4; dec 1; mov 4; pool;  
						
						mov 12; loop; mov 4; inc 1; mov 12; dec 1; mov 12; pool;  
						
						mov 11; loop; mov 11; loop; mov 11; dec 1; mov 11; pool;  
							
							mov 4; dec 1; 
						mov 11; pool;  
						mov 10; dec 1; 
					mov 10; pool;  
					  
				
				 
			 
			   
				 
					mov 4; loop; mov 10; inc 1; mov 11; inc 1; mov 4; dec 1; mov 4; pool;  
					
					mov 11; loop; mov 4; inc 1; mov 11; dec 1; mov 11; pool;  
					
					 
				
				mov 10; loop; mov 9; inc 1; mov 6; inc 1; mov 10; dec 1; mov 10; pool;  
				
				 
		
			mov 7; inc 1; 
				mov 9; loop; mov 9; loop; mov 9; dec 1; mov 9; pool;  
					mov 7; dec 1; mov 9; pool;  
			
			
			mov 6; loop; mov 6; loop; mov 6; dec 1; mov 6; pool;  
				 mov 1; inc 1; mov 6; pool;  
			mov 7; loop; mov 7; dec 1;   
					mov 5; loop; mov 2; inc 1; mov 10; inc 1; mov 5; dec 1; mov 5; pool;  
					
					mov 10; loop; mov 5; inc 1; mov 10; dec 1; mov 10; pool;  
					
					 
				mov 7; pool;   
			mov 5; loop; mov 5; dec 1; mov 5; pool;  
			
		mov 4; pool;  
		         
	
	 

mov 1; output; mov 2; output; mov 3; output; 

</pre></td></tr></table></div>
<div class="box"><table><tr><td>Brainf*ck_spaced（微編集）</td></tr><tr><td><pre class="codes">


      
 , 
&gt; ++++++++++++++++++++++++++++++++++++++++++++++++  &gt; ++++++++++++++++++++++++++++++++++++++++++++++++  &gt; ++++++++++++++++++++++++++++++++++++++++++++++++ 
 
	         
		&lt;&lt;&lt; [    
				 [ &gt;&gt;&gt;&gt;&gt; + &gt;&gt;&gt;&gt;&gt; + &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt; -  ]  
				
				&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; [ &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt; + &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; -  ]  
				
				 
			 
			     ++++++++++ 
				  
					 [ &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt; [ &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; + &gt; + &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt; -  ]  
						
						&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; [ &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt; + &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; -  ]  
						
						&lt; [  [  -  ]  
							
							&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt; - 
						&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; ]  
						&lt; - 
					 ]  
					  
				
				 
			 
			   
				 
					&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt; [ &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; + &gt; + &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt; -  ]  
					
					&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; [ &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt; + &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; -  ]  
					
					 
				
				&lt; [ &lt; + &lt;&lt;&lt; + &gt;&gt;&gt;&gt; -  ]  
				
				 
			
			&lt;&lt;&lt; + 
				&gt;&gt; [  [  -  ]  
					&lt;&lt; - &gt;&gt; ]  
			
			
			&lt;&lt;&lt; [  [  -  ]  
				 &lt;&lt; + &gt;&gt; ]  
			&gt; [  -   
					&lt;&lt; [ &lt;&lt; + &gt;&gt;&gt;&gt;&gt;&gt;&gt; + &lt;&lt;&lt;&lt;&lt; -  ]  
					
					&gt;&gt;&gt;&gt;&gt; [ &lt;&lt;&lt;&lt;&lt; + &gt;&gt;&gt;&gt;&gt; -  ]  
					
					 
				&lt;&lt;&lt; ]   
			&lt;&lt; [  -  ]  
			
		&lt;&lt;&lt;&lt;&lt; ]  
		         
	
	         
		&gt;&gt;&gt;&gt; [    
				 [ &gt; + &gt;&gt;&gt;&gt;&gt; + &lt;&lt;&lt;&lt;&lt;&lt; -  ]  
				
				&gt;&gt;&gt;&gt;&gt;&gt; [ &lt;&lt;&lt;&lt;&lt;&lt; + &gt;&gt;&gt;&gt;&gt;&gt; -  ]  
				
				 
			  
			     ++++++++++ 
				  
					 [ &lt;&lt;&lt;&lt;&lt;&lt; [ &gt;&gt;&gt;&gt;&gt;&gt;&gt; + &gt; + &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt; -  ]  
						
						&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; [ &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt; + &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; -  ]  
						
						&lt; [  [  -  ]  
							
							&lt;&lt;&lt;&lt;&lt;&lt;&lt; - 
						&gt;&gt;&gt;&gt;&gt;&gt;&gt; ]  
						&lt; - 
					 ]  
					  
				
				 
			
			   
				 
					&lt;&lt;&lt;&lt;&lt;&lt; [ &gt;&gt;&gt;&gt;&gt;&gt; + &gt; + &lt;&lt;&lt;&lt;&lt;&lt;&lt; -  ]  
					
					&gt;&gt;&gt;&gt;&gt;&gt;&gt; [ &lt;&lt;&lt;&lt;&lt;&lt;&lt; + &gt;&gt;&gt;&gt;&gt;&gt;&gt; -  ]  
					
					 
				
				&lt; [ &lt; + &lt;&lt;&lt; + &gt;&gt;&gt;&gt; -  ]  
				
				 
			
			&lt;&lt;&lt; + 
				&gt;&gt; [  [  -  ]  
					&lt;&lt; - &gt;&gt; ]  
			  /* `not = !a`*/
			
			&lt;&lt;&lt; [  [  -  ]  
				 &lt;&lt;&lt;&lt;&lt; + &gt;&gt;&gt;&gt;&gt; ]  
			&gt; [  -   
					&lt;&lt; [ &lt;&lt;&lt; + &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; + &lt;&lt;&lt;&lt;&lt; -  ]  
					
					&gt;&gt;&gt;&gt;&gt; [ &lt;&lt;&lt;&lt;&lt; + &gt;&gt;&gt;&gt;&gt; -  ]  
					
					 
				&lt;&lt;&lt; ]   
			&lt;&lt; [  -  ]  
			
		&lt; ]  
		         
	
	 

&lt;&lt;&lt; . &gt; . &gt; . 

</pre></td></tr></table></div>
<div class="box"><table><tr><td>Brainf*ck_compressed</td></tr><tr><td style="max-width:600px;">
<span class="codes">,&gt;++++++++++++++++++++++++++++++++++++++++​++++++++&gt;+++++++++++++++++++++++++++++++++​+++++++++++++++&gt;++++++++++++++++++++++++++​++++++++++++++++++++++&lt;&lt;&lt;[[&gt;&gt;&gt;&gt;&gt;+&gt;&gt;&gt;&gt;&gt;+&lt;&lt;&lt;​&lt;&lt;&lt;&lt;&lt;&lt;&lt;-]&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;[&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;+&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;-​]++++++++++[&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;[&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;+&gt;+&lt;&lt;&lt;&lt;&lt;​&lt;&lt;&lt;&lt;&lt;&lt;&lt;-]&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;[&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;+&gt;&gt;&gt;&gt;&gt;&gt;&gt;​&gt;&gt;&gt;&gt;&gt;-]&lt;[[-]&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;-&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;]&lt;-]&lt;&lt;&lt;​&lt;&lt;&lt;&lt;&lt;&lt;&lt;[&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;+&gt;+&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;-]&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;​&gt;&gt;&gt;[&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;+&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;-]&lt;[&lt;+&lt;&lt;&lt;+&gt;&gt;&gt;&gt;-​]&lt;&lt;&lt;+&gt;&gt;[[-]&lt;&lt;-&gt;&gt;]&lt;&lt;&lt;[[-]&lt;&lt;+&gt;&gt;]&gt;[-&lt;&lt;[&lt;&lt;+&gt;&gt;&gt;​&gt;&gt;&gt;&gt;+&lt;&lt;&lt;&lt;&lt;-]&gt;&gt;&gt;&gt;&gt;[&lt;&lt;&lt;&lt;&lt;+&gt;&gt;&gt;&gt;&gt;-]&lt;&lt;&lt;]&lt;&lt;[-]&lt;&lt;​&lt;&lt;&lt;]&gt;&gt;&gt;&gt;[[&gt;+&gt;&gt;&gt;&gt;&gt;+&lt;&lt;&lt;&lt;&lt;&lt;-]&gt;&gt;&gt;&gt;&gt;&gt;[&lt;&lt;&lt;&lt;&lt;&lt;+&gt;&gt;​&gt;&gt;&gt;&gt;-]++++++++++[&lt;&lt;&lt;&lt;&lt;&lt;[&gt;&gt;&gt;&gt;&gt;&gt;&gt;+&gt;+&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;​-]&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;[&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;+&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;-]&lt;[[-]&lt;&lt;&lt;&lt;&lt;&lt;&lt;​-&gt;&gt;&gt;&gt;&gt;&gt;&gt;]&lt;-]&lt;&lt;&lt;&lt;&lt;&lt;[&gt;&gt;&gt;&gt;&gt;&gt;+&gt;+&lt;&lt;&lt;&lt;&lt;&lt;&lt;-]&gt;&gt;&gt;&gt;&gt;​&gt;&gt;[&lt;&lt;&lt;&lt;&lt;&lt;&lt;+&gt;&gt;&gt;&gt;&gt;&gt;&gt;-]&lt;[&lt;+&lt;&lt;&lt;+&gt;&gt;&gt;&gt;-]&lt;&lt;&lt;+&gt;&gt;[[​-]&lt;&lt;-&gt;&gt;]&lt;&lt;&lt;[[-]&lt;&lt;&lt;&lt;&lt;+&gt;&gt;&gt;&gt;&gt;]&gt;[-&lt;&lt;[&lt;&lt;&lt;+&gt;&gt;&gt;&gt;&gt;​&gt;&gt;&gt;+&lt;&lt;&lt;&lt;&lt;-]&gt;&gt;&gt;&gt;&gt;[&lt;&lt;&lt;&lt;&lt;+&gt;&gt;&gt;&gt;&gt;-]&lt;&lt;&lt;]&lt;&lt;[-]&lt;]&lt;​&lt;&lt;.&gt;.&gt;.
</span></td></tr></table></div>

</div>
</div>
<pre>
少なくとも前半4つはCっぽいことがわかるだろう。
CamphorScript → PreprocessedCamphorScriptはただのCプリプロセッサもどきの仕事である。というか劣化版再発明するくらいなら既存のを使えばいいんじゃないかという気すらする。
基本的に、ライブラリの読み込みを行うために存在する操作である。ちなみに、余計なスペースを削除したり、コメント内の<code>*</code>を<code>_star_</code>に置き換えるなどの謎の挙動を示すらしい。
PreprocessedCamphorScript → Half-CompiledCamphorScriptでは、CamphorScriptの特徴である「関数」「演算子」「構文拡張」を処理する。これが終われば半分終わったようなものである。



</pre>
<hr>
<pre>

ライブラリは、Cと異なり関数定義を含む。これは、CamphorScriptの「関数」の実態が文字列置換であることを考えれば当然のことである。
故に、ライブラリには基本的に二重インクルード防止イディオムを書く必要がある。というかこれを書くためだけに#ifndefやらを実装した。だって#pragma onceなんて実装するのめんどくさいじゃん

現状では、非負整数リテラルと文字リテラルという2種類のリテラルが存在する。非負整数リテラルは<code>35</code>とか<code>114</code>とかであり、文字リテラルは<code>'z'</code>とか<code>'?'</code>とかである。
エスケープシーケンスも用意されているが、Cの丸パクリなのでCamphorScriptには本来不要な<code>'\?'</code>とかまで無批判に採用している。
</pre>
<table style="font-family: monospace; text-align:right;">
<tr><td>'\a'</td><td>7</td></tr>
<tr><td>'\b'</td><td>8</td></tr>
<tr><td>'\f'</td><td>12</td></tr>
<tr><td>'\n'</td><td>10</td></tr>
<tr><td>'\r'</td><td>13</td></tr>
<tr><td>'\t'</td><td>9</td></tr>
<tr><td>'\v'</td><td>11</td></tr>
<tr><td>'\0'</td><td>0</td></tr>
<tr><td>'\?'</td><td>63</td></tr>
<tr><td>'\''</td><td>39</td></tr>
<tr><td>'\"'</td><td>34</td></tr>
<tr><td>'\\'</td><td>92</td></tr>
</table>
<pre>
きっかけは、<a href="http://d.hatena.ne.jp/aike/20090209">難読プログラミング言語をサクサク書くためのマクロ機能付超簡易言語 - aikeの日記</a>という記事を読んだことである。
</pre>
</body>
</html>