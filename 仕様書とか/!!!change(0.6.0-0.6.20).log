ver 0.6.20   16:09 2014/07/31 (木)
--課題--
せっかくmajor updateするので、
divtestのバグ原因究明、
テスト例の増加、
FIXMEの排除など行いたい

--divtest--
FIXME bustingは飽きてきたので、divtestを通そう
…はい。原因解明。 -- 23:56 2014/07/27 (日)
何故か関数内で(c2,d2)+= ~a;が
 while(a){c2__TMP_1+=1;d2__TMP_1+=1;a-=1;}でなく
 while(a){c2__TMP_1+=1;b__TMP_1+=1;a-=1;}に化ける
そこを直したら直った -- 0:04 2014/07/28 (月)
さーてこれは面倒になりそうだ
また明日(←え)に繰り越し -- 0:05 2014/07/28 (月)
明日(←え)になったのでサンプル作ろう -- 10:42 2014/07/28 (月)
かなり削ったサンプル出来た -- 12:07 2014/07/28 (月)
と言うよりアレだね、何で関数内で関数呼ぶとブロック付かないんだろうね。 -- 16:10 2014/07/28 (月)
検証の結果、関数内でのブロックは消失すると分かった。 
但し当然while(){}を除く-- 16:13 2014/07/28 (月)
あ、分かった
replacer3の型がSCMEP [SimpleSent]になっているのが問題
つまり一文がブロックに化けることを想定していない -- 16:21 2014/07/28 (月)
つまりSimpleSentをSentに変えればいいが、面倒臭い
仕方がないので現行SimpleSentをBetween SimpleSent Sentsに変えて対応(要はCall1WithBlockと同判定)
…やっぱSentにしよう -- 16:30 2014/07/28 (月)
エラーを大量に出してからfixmeを振りかける
fixme振りかけ終了、これからfixme撤去作業を行う
現在敵は27匹 -- 16:42 2014/07/28 (月)
型強制作戦を執行、9匹の敵が姿を表した -- 16:43 2014/07/28 (月)
9匹に見えたのは5匹だったようだ、現在敵は22匹 -- 16:51 2014/07/28 (月)
残り22匹を倒すにはpos情報が必要だ
しかし現在それは供給されていない
Base_Step2の協力を仰ぎたいが、まず流通体制Stateを対応させねば
時間がないのでまた後で -- 16:54 2014/07/28 (月)
TupleTransの協力を確保 -- 21:17 2014/07/28 (月)
あ、なんかposもう流通してた
仕方ないので今度何か回す時のために()を回そう -- 21:37 2014/07/28 (月)
では残りの敵を排除していこう
posの協力を基に敵を全て排除できた。あとはBase_Step2に連絡を取ろう。 -- 21:44 2014/07/28 (月)
Base_Step2側の協力も得られ、無事再び平和が訪れた。
まあautotestの方で大規模な反乱が起こるのは分かっているが。 -- 21:46 2014/07/28 (月)
あ、20KB到達したね。ver 0.7らへんで分けないとね。 -- 21:49 2014/07/28 (月)

--divtest(part2)--
bugsample通してみた
確かにブロックは(足さ|保た)れるようになったけど、バグは直ってない
更にwhileの{}が2重になるという新たな問題発生 -- 21:53 2014/07/28 (月)
これはすぐ治るとして、ブロックに関する別のsampleが必要かもしれない
まあそろそろ時間なのでまた後で -- 21:54 2014/07/28 (月)
while2重バグ直した -- 23:43 2014/07/28 (月)
そうそう、ver 0.6を0.6.30まで続けることにしました
何故ならBase_Step2にはまだ実装したいことが多くあるから -- 23:44 2014/07/28 (月)
rpl1_2で外で使ったtableを直に回しているが、大丈夫か？ -- 0:22 2014/07/29 (火)
違う、collisionTableの方が問題だ。 -- 0:24 2014/07/29 (火)
ということでcollisionTableの構造変更 -- 0:28 2014/07/29 (火)
エラー全排除 
遅いのでまた明日(←え）-- 1:01 2014/07/29 (火)
やってみた
直ってないです(´・ω・｀) -- 7:10 2014/07/29 (火)
--- replaces a valuelist with collision table and replacement table を
--- replaces a valuelist with replacement table and collision table にしよう
はい直った -- 7:14 2014/07/29 (火)
対症療法だけどまあいいや
それより前にautotestとの全面戦争が待っている -- 7:14 2014/07/29 (火)
autotesterrとの和平を確認 -- 7:16 2014/07/29 (火)
autotestを通す。え、なんで-Eでfailするの -- 7:19 2014/07/29 (火)
あ、stdcalcいじってたの忘れてた -- 7:22 2014/07/29 (火)
直した。敵を4体目視。
1体排除。 -- 7:27 2014/07/29 (火)
…xCopyVar2でエンバグですな -- 7:28 2014/07/29 (火)
よし、かくなる上は、「collision table top → replacement table → collision table rest」としよう
ついでにnewIdentIPを消去し、参照解決を関数化したものもある -- 8:02 2014/07/29 (火)
autotestしてみたがCopyVar2もOK -- 8:06 2014/07/29 (火)
残りもOK -- 8:16 2014/07/29 (火)
さて、bugsampleとdivtestをautotestに登録しよう -- 8:17 2014/07/29 (火)
………バ☆グ☆直☆っ☆て☆無☆い -- 8:20 2014/07/29 (火)
…あ、確か関数内呼び出しでCollisionTableをいじり忘れてた気がする -- 8:21 2014/07/29 (火)
直してきた -- 8:24 2014/07/29 (火)
autotestしてみたがCopyVar2で落ちる
そしてbugsampleはnot definedエラーを吐いてくる。怖い。 -- 8:27 2014/07/29 (火)
modifyの位置を間違えてたようだ、直した
bugsampleも直った -- 8:30 2014/07/29 (火)
なおCopyVar2は通らない模様 -- 8:32 2014/07/29 (火)
しかも普通にバグという -- 8:34 2014/07/29 (火)
よし、寝かせとこう -- 8:53 2014/07/29 (火)

--CPP使ってversionオプション--
そうそう、CPP履修しときたいよね
じゃあ--version作ろう
え、現実逃避？何のことかな？ 
だってCPPが出来ればNDEBUGが出来て、
printfデバッグが楽になるんだよ？ -- 16:04 2014/07/29 (火)
さてversionの処理が出来た
というか強制上書きオプション(--help, --versionなど他のオプションを上書きするもの)の対応コードを書いた -- 16:31 2014/07/29 (火)
さてbatchとの連携をしようかと思ったが意外に面倒
もうHaskellに回すか -- 16:41 2014/07/29 (火)
というかそれ以外に方法ないしbat使おうという方が無理だ
ということで難なくHaskellで処理
保守の必要もないので無駄にゴルフ -- 22:56 2014/07/29 (火)

--divtest(part3)--
え、xCopyVar2やれって？
やりますよやりますよ -- 23:04 2014/07/29 (火)
その前に、せっかく今通ってるんだし、bugsampleをautotestに登録
名前はthreecalls -- 23:12 2014/07/29 (火)
…さて、printf使いますかね。
ghciでinteractiveにやろう
ということでログを取ってきました
えっと、ログは期待した通りの結果を吐くんだよね -- 11:25 2014/07/30 (水)
ログ取る関数間違えた？ -- 11:32 2014/07/30 (水)

--結果--
ちょっと今回のverが長くなったのでxCopyVar2を切って一旦verUpします
互換が切れた？何のこと？ -- 12:54 2014/07/31 (木)
さらにdivを標準ライブラリに追加し、divtestをxShowという名前で登録 -- 16:01 2014/07/31 (木)
autotest通った -- 16:07 2014/07/31 (木)
autotesterr通った -- 16:09 2014/07/31 (木)


ver 0.6.19 20:02 2014/07/27 (日)
--課題--
FIXME排除

--解決--
現状でFIXMEは7グループ
一つ一つ潰していこう -- 8:02 2014/07/27 (日)
まずfile: Auxilary line: 81。
これはアルゴリズムの効率の悪さを憂えたもの
えーでもO(n)のはずだし別にいいんじゃない
reverseの時点でO(n)なんだし
よってここはFIXMEだけ削除
残り6グループ -- 8:07 2014/07/27 (日)
次はbreakBy'関数。
取りあえず戻り値をMaybeにしてFIXMEを移動 -- 8:23 2014/07/27 (日)
その次はBase_Step2の109行目、does not replace a function call when it's followed by a block
これは仕様なので問題ない。排除。
残り5グループ -- 8:25 2014/07/27 (日)

--解決2--
次に狙うのはconvert2のPleq _ _系統
これは…replacer3で使う型とconvert2_2で使う型が微妙にズレてるのかな？
だからといって完全に分離すると衝突避けが面倒
ということでEastとWestに分けよう(絶望) -- 8:41 2014/07/27 (日)
あ、でもやっぱ面倒なのでReplacer2で使うのは前にR_を付けよう
変換関数が面倒だけど -- 17:24 2014/07/27 (日)
まずSimpleSent2をRで包んでnewtypeに
当然エラーしか出ないのでパターンマッチをRで包む -- 17:33 2014/07/27 (日)
その他の細かいのを潰してSimpleSent2の分離に成功 -- 17:42 2014/07/27 (日)
後はこれの宣言を分離するのみ
まずコンストラクタを分離 
ボイラープレートだけど仕方ないね -- 17:54 2014/07/27 (日)
それをパターンマッチに反映 -- 17:58 2014/07/27 (日)
そしてFIXMEを消すために型に反映
すると当然エラーである -- 18:02 2014/07/27 (日)
さて困った、OpListはSimpleSent2でなくてはいけない
直したらまたエラーの山 -- 19:39 2014/07/27 (日)
…と思ったら単なるPleq系統の直し忘れだった
その系統のは直った -- 19:47 2014/07/27 (日)
Replacer2は直った
よしエラー消えたのでテスト通す -- 19:51 2014/07/27 (日)
よしautotest通った -- 19:59 2014/07/27 (日)
autotesterrも通った -- 20:02 2014/07/27 (日)
これでいいや
え、FIXMEの完全排除？まだ1バージョンあるじゃん

--verUp進捗--
さてverUpのための進捗を考えよう
まず-Dオプションを作ろう
gccの仕様を調べたところ、
-Uではソースコードで定義したマクロが消せないらしい
じゃあ作る意味が無いので-Dだけ
…とその前にレコード糖衣構文使って可読化 -- 21:12 2014/07/27 (日)
ちなみに地味に-nostdincと-nostdlibがバグっていたことが発覚、修正
ついでに知らないオプションを渡すとエラーを出すように -- 21:18 2014/07/27 (日)
本筋の-Dが採用できた -- 21:35 2014/07/27 (日)
そしてautotes(t|terr)も通った -- 21:40 2014/07/27 (日)
え、divtest？まだ1バージョンあるじゃん

--その他--
北京仕様書を追加 -- 7:54 2014/07/27 (日)



ver 0.6.18  1:43 2014/07/19 (土)
--課題--
autotestをHaskell化したい
type Ident = String;というのをどうにかしたい(変なのが渡ったら困る)

--autotest--
!killjunk.batは別にいいだろう
これぐらいならシェルで書いたほうが楽だ
build.bat,build2.bat,!exec.batも同様
ということでautotest.batである
→結果。思ったより難しい。
今のところは転進しよう --23:54 2014/07/18 (金)

--Ident抽象化--
IdentをType.hsでロック
そこまでの混乱を鎮めるのも大変だった
さてここからが辛い -- 0:26 2014/07/19 (土)
UserStateがIdent2に対応 -- 0:33 2014/07/19 (土)
replacer2の自明なところは対応 -- 0:37 2014/07/19 (土)
replacer2対応 -- 0:44 2014/07/19 (土)
Base_Step2対応 -- 0:52 2014/07/19 (土)
autotest通す -- 0:56 2014/07/19 (土)
autotesterr通ったけど「function Ident2{ unId = "dddd" } not defined」(´・ω・｀) -- 0:58 2014/07/19 (土)
ついでに前に壊したOperのShowを直した -- 1:14 2014/07/19 (土)
show Identバグを直すべくNotepad++で1行ずつ探しshowを撲滅(showStrとshowNumに分割)-- 1:27 2014/07/19 (土)
この後、showをSafePreludeから抜けばHaskellがshowを探してくれると気づき、やってみる。 -- 1:27 2014/07/19 (土)
2つほど取り残しを見つけた後、他のBaseに波及し面倒になる -- 1:32 2014/07/19 (土)
Camphor.Showを作成、ファイル数40となる -- 1:32 2014/07/19 (土)
頑張って完成する -- 1:33 2014/07/19 (土)
autotest通す -- 1:39 2014/07/19 (土)
autotesterr通す -- 1:41 2014/07/19 (土)

--結果--
今回の仕様追加
1. IdentじゃないものをMEMORY using pragmaに入れるとエラーを出すように
2. pragma形式のコメントの後方互換性の廃止
3. エラーメッセージで演算子もquoteされるように

ver 0.6.17 20:37 2014/07/18 (金)
--課題--
分割したり併合したり変換子入れたりしてコードの可読性を上げてコメントを足したい
USING pragma作りたい

--変換子-- 6:16 2014/07/17 (木)
convert2_2の変換子をお掃除
特にrunStateTをお掃除←これ基準にすると捗る
simplyReplaceRVCとかは綺麗になった(forMも使えるようになったし)けど、
newStat3getterとかは逆に分かりにくいかも
その後replacer側も出来たので今度はStateT削り
それも出来た
まあliftがいっぱい残っているが気にしたら負けである
newK(1～5)にReaderTを導入
replacer2にもReaderTを導入
さてそろそろusing作らねば
あ、待てよ、変数消費したらusingのstatが変わる
ということはTmpStatもStateTに回さねば
ということでまたデータ構造の変更である

--using-- 20:37 2014/07/18 (金)
ということでusingが書けた
面倒くさそうに思えたが実は殆ど何もしていないというアレ
日付上は丸1日掛かっているが仕方ないね  -- 19:40 2014/07/18 (金)
…と思ったらブロックの中で変数を再宣言している
意味ないじゃないですかやだー
ということでusingの時はcharをコメントアウトしたけど、deleteどうしよう
usingで作られた時はdeleteしちゃいけないのだが
…そうだ、coltableの構造を変更しよう
-C18でコンパイル。お、かなり短い。
interpreterで実行。お、動いた。
ということでautotestに登録 -- 20:36 2014/07/18 (金)
そしてverUpである 

ver 0.6.16 17:21 2014/07/16 (水)
--課題--
分割したり併合したり変換子入れたりしてコードの可読性を上げてコメントを足したい

--解決--
まずconvert2_2に変換子入れよう
引数と戻り値の順番入替えなきゃいけないので面倒
その後はカリー化→パターンを関数化して抽象化
そしてstateとrunStateTを導入した時のエラーの嵐
取りあえずエラーの出たところをundefinedにしていく戦法
それが上手く行ったのでundefinedを消していく戦法
それがなんか上手くいかないと思ったらstateとStateT間違えてた
そこからはトントン拍子に変換子が導入できた
まあStateTモナドの中でliftを使うべきところを、
Eitherモナドの中でrunStateTを使うなど、
StateTらしさの無いコードとなったが仕方ないね
その後調子に乗ってreplacer3にも変換子入れた
でも単に「入れた」だけなので可読性は上がってない
ということで次回はStateTとrunStateTを減らすということで
usingはその後

--verUp進捗--
ということでverUp用の作業に入ろう
今回は-nostdincと-nostdlibオプションの追加
それぞれデフォルトのincludeパスをincludeリストから削除する
但し当然-Iや-Lで上書きできる

--その他--
課題は多いのに外からのverUpが毎回しょぼい
そろそろ変則変数宣言とか作りたい
あとchange.logを分割。
今後も20KB付近を基準に分割していく予定



ver 0.6.15 23:19 2014/07/15 (火)
--課題--
USING pragma作りたい
分割したり併合したり変換子入れたりしてコードの可読性を上げてコメントを足したい

--using進捗--
取りあえずデータ構造変えた
replacer2の方でもpragma判定しなきゃな
さてそんなことよりnewK1～5にこれらを反映させねば
つまりreplace(Func|Op)Macroにこれらを反映させねば
つまりreplacer3にこれらを反映させねば
ということで実際のreplace部分以外は反映させた
pragma判定もした
ということで実際のusing処理『以外』できた
でも外からじゃ仕様が殆ど増えてないしこれじゃverUp出来ない

--verUp進捗--
よって別の所をいじってverUpしよう
ということで困ったときのIO頼み、IOをいじろう
ということで存在しないファイルを指定した時にNo such fileエラーを出すように
さらに-I,-Lオプションに対応、別ディレクトリにlibがあっても対応できるように
まあエラー対応してないけど

--その他--
autotest通した
xCopyVar2を復活させた


ver 0.6.14 11:43 2014/07/15 (火)
--課題--
グローバル変数名とマクロ内部変数名の衝突問題を解決したい
それと並行してUSING pragma作りたい

--進捗過程--
とにかくreplacer2に回覧板(CollisionTable)を回さなくてはいかん
replacer2という巨大な関数のデータ構造を書き換えているので面倒
monad transformerを使えば楽なんだろうが未履修だから仕方ないね
結果、この作業に07/15まで掛かるという極端な進捗ダメですを発揮
バグがかなり多そうだし衝突解決した時点でverUpしていかなくては
だけど疲れたし忙しいし,変数上書きしたしバグ抜きは次回にしよう
pragmaの処理、変数上書先の上書きが必要だし、USINGも次にしよう
テストしてないものをreleaseしたくはないが、忙しいし致し方ない
なおこの進捗過程をMS Gothicとかの等幅フォントで見ると揃ってる

--その他--
このversionは未テストなので実行時はいつも以上に自己責任です



ver 0.6.13 21:48 2014/07/11 (金)
--課題--
-C18したisNumberにバグを引き起こした、「グローバル変数名とマクロ内部変数名の衝突」を直したい
ちなみに直す場所はReplacer2.hsの34行目とか
要は
1.グローバル変数の表を引数にとり、衝突していたら変える
2.衝突していることを他の文にも伝えるための「衝突回避ReplTable」を作って回覧板とする←
必要がある
要はお馴染みのデータ構造いじりである

--解決(?)--
グローバル変数の表は既に得ていたので取りあえず衝突判定をした（衝突したらエラーを出すようにした）
そしたらxCopyVar2が動かなくなった(わざと。次回用の叩き台)のでautotestからコメントアウト
標準ライブラリは衝突しないように変数名を変更、よってisNumberのコンパイル結果が正常に

--その他--
フォルダ整理
ccscのエラーメッセージをstdoutではなくstderrに出力するよう修正
ccsrcのIO縮小

--コメント--
To doが全然減らない(´・ω・｀)



ver 0.6.12  4:34 2014/07/05 (土)
テスト前なのでバグだけ修正
--バグ修正--
関数宣言の演算子の前にスペースがある[ void func(char&x1,char&x2 ,char&x3){} ]とParseErrorが出るバグを修正
コンパイルするファイルと同ディレクトリにフォルダがあるとIOエラーが出るバグを修正


ver 0.6.11 20:56 2014/06/29 (日)
--課題--
#include "other"っての作りたい

--解決--
一応作れた(テスト済)
でもコピペの集約の仕方が微妙

--その他--
ccsc内の長いコマンドオプションの処理をIOから分離
Base_Step1のデータ構造をお掃除



ver 0.6.10 10:31 2014/06/22 (日)
--課題--
LINE pragma実装したい

--解決--
パーサを書いたが肝心のpositionの処理が面倒だった
Hoogleがローカルに無かったら諦めてた。まあ出来たけど
但しテストはしていない。仕方ないね
あと今の処理だと低レベル時のコンパイルエラー(例:全角文字)の行が合わないはず。まあいいや

--その他--
NonEmptyをモナドに
SafePreludeにApplicativeとjoinを追加



ver 0.6.9 22:05 2014/06/21 (土)
データ構造を少し変更(といってもタプルをバラしただけ)
Base_Step1の出力で使ってた/* start of ～ */などのコメントを、
/*# LINE start ～ #*/等に変更
当然ながらテストファイル再コンパイルです
面倒な再コンパイルの結果を保存したいので、少し早いがVer↑
後は入力側でpragma対応させるだけ
ちなみにpragmaでParseErrorは吐かない仕様にする予定

ver 0.6.8 17:56 2014/06/20 (金)
--課題--
void func(char& a) = 0;などの「ヌル関数宣言」が欲しい
func(1,1);がoverlapping_argumentsになるバグ発見、直さねば

--解決--
ヌル関数宣言の処理を書いた
データ構造を大幅にいじったので割と面倒だった
overlapはfilterを挟んで対策
テストもした

--その他--
toListの衝突が面倒だったのでListlikeという型クラスを作成。なおMapは無理な模様
replacer2の戻り値を[SimpleSent]に変更



ver 0.6.7 23:17 2014/06/18 (水)
--課題--
a += a; がエラーにならない

--解決--
条件分岐を置いた
0.6.6のを使いまわしたので楽だったがtoListの衝突が面倒

--その他--
-o オプションなしでコンパイルすることが殆ど無いので必須にしてみた
コードを一部簡略化してみたが明示再帰が気になる
何とかfoldrに出来ないものか
SafePreludeというモジュールを作り、ccscにおけるPreludeのimportを独占
未実装一覧.txtに外からの視点のTo doを作成



ver 0.6.6 18:06 2014/06/18 (水)
--課題--
void func(char& a, char& a){ a += 3; } がエラーにならない

--解決--
それ用の条件分岐を書いた
修正自体は簡単だったけど、途中論理エラーが出て面倒なことになった

--その他--
autotesterrでFAILUREが出たが、単なる改良(二重波括弧が一重波括弧になった)(原因不明)だったので上書き



ver 0.6.5  3:19 2014/06/18 (水)
非構文エラーをautotesterrに登録
但しparseErrorが吐かれたりfixmeが出たりとにかくカオスである
定義時に二重宣言が捕まえるようにした。多分。
エラーサンプルの誤りを修正
ユーザーに見えていたFIXMEを削除
エラーメッセージの改良
データ構造の変更

ver 0.6.4 20:18 2014/06/15 (日)
--課題--
中でメモリを獲得する関数が呼べない
外で同一名の変数が定義されているか否かによって
エラーメッセージが変わる(無し: _temp\malloc.txt 有り:_temp\malloc2.txt)ところからして、
スコープ系統のバグと思われる

--原因究明過程--
1. 調べてみた。なんとnewC, newD系統のエラー。つまりreplacer2ではないかも
2. 検証。malloc.txtではdeleteを、malloc2ではcharを消したらエラーが消えた
   つまり、defineエラーだけでなく、char/deleteの対応もできてない事が判明
3. ソースを読む。
4. どうせBase_Step2の202行目の sequence [replacer mname ssent stat table | ssent <- xs]だろう。
5. いや、replacerの仕事はreplaceすることだけだからstatが伝わっていようがいまいが関係ない
   convert2_2を呼んでる箇所にこそバグはあるはず
6. なるほど、200行目か。1文ずつconvert2に渡ってたらそりゃバグるはず。

--解決--
ということでreplaceする部分＝再帰する部分と、convert2に渡す部分を分けたら直った
char/deleteの対応もできた
xIsNumberもコンパイルできた
そしてそれらをautotest.batに追加
さて次回からの目標どうしよう
テスト例を増やすか
可読性も上げたいけど

--その他--
xFunc__PCS.txt追加


ver 0.6.3 10:44 2014/06/15 (日)
--課題--
char b;{char a; a+=3; delete a;}delete b;がバグる(identifier "b" is not defined)
そのせいでxAtoIが変換出来ない

--解決--
散々探しまくった挙句、removeIdentにバグあり。直した。
この過ちを繰り返さぬよう__HCCSというフォルダを作り、
xAtoI__PCS.txt -> xAtoI__HCCS.txtをautotest.batに登録
他にもxOper__PCS.txt, xBlock__PCS.txt, xBlock2__PCS.txtなども同様。

--その他--
要らない-fno-warn-do-bindなどの消去
nE=(:|[])という関数の作成。やはりコンストラクタは前になきゃね
でもこれ使ってるのって殆どがreplacer2だしreplacer2の戻り値を変えたほうがいい気がする



ver 0.6.2  8:40 2014/06/15 (日)
--課題--
deleteされていない変数を監視できない

--解決--
データ構造を変革してfile:Base_step2.hs line:144のFIXMEを修正
よってdelete問題も解決
しかし位置情報が適当すぎるので修正が必要

--その他--
Global.Operatorsで(<$>)をエクスポートした



ver 0.6.1 15:48 2014/06/14 (土)
--課題--
関数内で変数宣言が出来ない
と言うよりchar a;{char a; a+=3;delete a;}で二重宣言エラーが出てしまう件について

--解決--
ブロック内で変数宣言できるようにした
但し、file:Base_step2.hs line:144のFIXMEのせいで、line:93が効かず、deleteされていない変数を監視することができない。
よってデータ構造の変革が必要

--その他--
UserStateを抽象化



ver 0.6.0  1:48 2014/06/14 (土)
--課題--
function "while" is not definedバグの修正

--解決--
Call1の仕様に問題があり、新たにCall1WithBlockというのを作って対処。
これによりxAtoIは翻訳できるようになった。よってバージョンアップ。
但し未だに関数内で変数を宣言できないという問題は残っているのでxIsNumberはまだ。

--その他--
標準ライブラリの改善なども行った。