{-# LANGUAGE NoMonomorphismRestriction, FlexibleContexts , NoImplicitPrelude #-}
{-# OPTIONS -Wall -fno-warn-unused-do-bind  -fno-warn-unused-imports #-}
{- memory allocation -}
module Camphor.Base.Base_Step5
(step5
) where

import Camphor.SafePrelude 
import Camphor.Global.Synonyms
import Text.Parsec hiding(token)


step5 :: Stream s Identity Char => FilePath -> s -> Either ParseError Txt
step5 file str = convert5 <$> parse parser5 (file ++ "--step5") str

type Chunk = String

parser5 :: Stream s m Char => ParsecT s u m [Chunk]
parser5 = many sentence <* eof

sentence :: Stream s m Char => ParsecT s u m Chunk
sentence = (:[]) <$> anyChar

convert5 :: [Chunk] -> Txt
convert5 = concat