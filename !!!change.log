To do
Step7のエラーメッセージ改良
operatorパーサとかいうバグの温床を修正
Step2データ構造の整理

ver 0.5.26 17:48 2014/05/26 (月)
Step2を分割、Auxilary.hs作成
両括弧なし演算子の処理を半分作成
半分というのは逆結合性の二演算子の不倶戴天性を明記
残りはundefinedにしてあるがすぐ埋められると予想
そろそろテスト勉強したいのでここらでverUp

ver 0.5.25 21:52 2014/05/24 (土)
左括弧なし演算子の処理が出来た
そろそろ400行に近いので分割したい

ver 0.5.24  6:39 2014/05/24 (土)
右括弧なし演算子の処理が出来た
そろそろStep2を分割しようかな

ver 0.5.23  0:01 2014/05/24 (土)
#if_1 とか#if_0とか実装
そして関数呼び出しの処理を作成
残るは括弧なし演算子の処理のみ
この調子なら0.5.29までに一応の完成にはこぎつけられるかも

ver 0.5.22 17:48 2014/05/18 (日)
多くのパターンをひたすらしらみつぶして行くこの頃
関数定義とかfunc(a,b) char c;のエラー化などが追加できた
データ構造は直していない

ver 0.5.21 16:03 2014/05/17 (金)
再帰すればいいことに気が付き、opの処理はできた。多分。
ちょっとデータ構造とか気持ち悪くなってきたので直したい

ver 0.5.20 17:37 2014/05/15 (木)
思っていたより面倒だ
Txt返すんじゃなくてSentsを返すようにするかも
あまり進展なくメジャーアップデートはしたくないので0.6.0にはしない

ver 0.5.19 23:55 2014/05/14 (水)
演算子宣言と呼び出しをやってはいるが面倒
型のチェックを共通化
そろそろ寝たいので更新残りを21回にしよう

ver 0.5.18 18:00 2014/05/14 (水)
getPositionをトークンの前ではなく後に出力するよう変更。
xIsNumberとxAtoIをpretty-printしてみた。
行番号とかを追加。
しかしモナドでやっていくのも辛そうだし安定のパターンマッチでもやってみようかな、-Wall効くし。
ということでやってみた結果、(関数|演算子)(宣言|呼び出し)以外は全て出来た
初期と比べれば割と上達しているはず
さてあと2回で完成できるのだろうか


ver 0.5.17 17:28 2014/05/12 (月)
PreprocessedCamphorScriptの仕様が細かくなったのでfixdeclというライブラリで演算子の結合性を定義
ついでに標準ライブラリに2重インクルード防止処理
プリプロセス時に/を含む演算子にバグ発覚
原因はoperatorに/が認識されていなかったこと
直したがoperatorを直にいじったので怖い
とは言えoperatorを使ってるPCS_ParserとBase_Step1に於いて、
どちらともコメント処理を演算子より前に持ってきているので大丈夫かな？
さて本題のStep2について。あと3回のアプデ制限というのは辛い
仕方がない、23回という手を使おう
手抜きになってしまっては困るのでね
あと最適化を掛けてみた。そんなに実感はない。

ver 0.5.16 19:28 2014/05/11 (日)
拡張子がないとき自動で規定の拡張子（今のところ.txt）を付ける仕様にしておいた
これでxIsNumberが-Eできる。
ということでStep2をテストしてみた結果、
文解析では、単純ミスが発覚した（カッコが付いている時とついていない時のためにtryがいる）
（修正済）こと以外は上手く行ったみたいである。
但し肝心のマクロ処理が上手くいくかどうかは当然のことながら別問題
あとSingle(Nothing, ...)が無駄なのでとりあえずNothingをXにしておいた
xAtoIもテスト、無事成功

ver 0.5.15 17:27 2014/05/08 (木)
第二演算子文もできたので、あとはそれを処理するだけ
いやー辛そう

ver 0.5.14 21:14 2014/05/06 (火)
関数呼び出しは出来た
あとは第二演算子文（辛そう）
これだけでは達成感が無いのでCamphor.Globalの解体
面倒だったが何とか出来た

ver 0.5.13  9:27 2014/05/06 (火)
voidの処理が出来た
後は関数呼び出しと演算子文について外出先で考えるのみ

ver 0.5.12  6:50 2014/05/06 (火)
怖い部分関数を色々作ったりしながらSourcePosを考えたBase_Step2が大まかに出来てきた
後はvoidの処理とBNFで表す演算子文のみ
これは頑張れば0.6.0までに何とか出来るか？←フラグ

ver 0.5.11 17:14 2014/05/05 (月)
Step2に新たな催奇的ゲフンゴフン再帰的データ構造作成
関数型マクロのこと忘れてたけどどうしようか
まず一旦一次パーサでトークンごとに分解してからその後そのトークンから文を判定する第二パーサを作ろうか
そしてその隙間に関数型マクロを入れればいい
よしそうしよう
Char以外をパースするパーサも作れるだろ多分

ver 0.5.10 23:31 2014/05/04 (日)
肥大化したログを3つ残して削除
Step7のエラーメッセージを一部改良
それに付随してグチャグチャしてたCamphor.Globalを内容別に4つに整理。分割解体もアリかも
あと汎用性のないlib_dirとかがGlobalになっていたのが気に入らず、Lib.hs作成
Step2モナド化

ver 0.5.9  22:19 2014/05/04 (日)
少し前進(infixlとinfixr)
でもこれ絶対モナド化できるフラグだよなー
あれか、State(ParsecT s u m a)とか使うのか？

ver 0.5.8  18:02 2014/05/04 (日)
PCS_parserを分離
Step2の大まかな枠組み作成
Camphor.PartialやmakeErrなどの便利機能も

ver 0.5.7  23:33 2014/05/02 (金) 
Step2の字句解析完成
入出力ファイルにconと指定するとコンソールに出すように変更
Windows版だと違いは無いけどLinuxでも公式サポートということ
Linuxでconというファイルで入出力したいときは当然 ./con と指定すればよい

ver 0.5.6   5:45 2014/05/02 (金)
R_Step4完成

ver 0.5.5  16:45 2014/05/01 (木)
一部不足していたテストファイルを作成し、__CS以外の全てについて全ファイルでのテスト完了
自動的にサンプルを作ってくれるbatが欲しい

ver 0.5.4  17:20 2014/04/29 (火)
テストケースのフォルダ分割完了
R_Step4が思いつかない

ver 0.5.3   8:47 2014/04/29 (火)
R_Step4(NouDarake -> CompiledCamphorScript)を作成したものの、
グローバル変数をwhile文の中で宣言してしまっている問題あり
要するに未完成
テストケースを追加し、またautotestlist.txtを整理整頓
種別でフォルダ分けしようか考え中

ver 0.5.2  22:12 2014/04/28 (月)
流れ.txtを改訂
エラーメッセージの可読性向上(Step7を除く)

ver 0.5.1   1:00 2014/04/28 (月)
autotest.batのファイル一覧はbat\autotestlist.txtから読み取るように変更
NouDarakeパーサをStep7から丸コピしてR_Step4を作ろうとするも、
モジュール化できることに気づきCamphor.ND_parserとして分離
と思ったらエスケープを忘れていて見事にエラーが出た
多分テストが無かったら気付かなかった。

ver 0.5.0  20:05 2014/04/27 (日)
定数最適化のための資料を入手し、元サイトのURLを参考文献に追加
参考文献.txtに漏れがあったので追加
autotesterr.batにエラーメッセージが読めるオプションを作成
depthが負になる時には即エラーを吐くことで#elseのエラーメッセージを直した
Step7のエラーメッセージが今のところ読みにくいので修正の必要あり

ver 0.4.19  9:26 2014/04/27 (日)
複数行コメントバグが直った
まだ#else直ってないけどもともと実装するつもりがなかったんだし別にいいよね
というかそれが直ったらver0.5.0にしよう

ver 0.4.18 15:02 2014/04/26 (土)
複数行コメントバグが直らない
このままではバージョンを上げられない
そうだ、エラーテストを増やそう
→Step4でeofバグがあるようだ→修正
ついでにStep1も修正。やはりエラーテストは大事。


ver 0.4.17 10:41 2014/04/26 (土)
#ifのない#elseは予想に反してエラーを吐いた
だがそれは文章終了時に出るので分かりにくいので直さねば
それより深刻なのは、複数行コメントでプリプロセス命令を囲んでも無視されないというバグ
いや、分かっていたことではあるけど面倒だ
それはともかくdelete x;をNouDarakeに対応させた。assert_zero 3;と訳す。これは今後の最適化に必要になってくる。

ver 0.4.16  0:48 2014/04/26 (土)
RStep7でerrorを使っていた問題を修復
Base_Step1にて#elseに対応
但し多分#if(def|ndef)が無くてもエラーを吐かない
#ifはないので#elifは無く、また#elifdefとかを作る気も今のところない。できそうだけど本家にないから
よって#elseと#ifdefの二行で書いてもらうことになる
あとkilljunkでテストログを殺さないことにした

ver 0.4.15 17:10 2014/04/25 (金)
Integerを返すuint'を作成
エスケープシーケンスで\a\b\f\n\r\t\v\0\?\'\"\\に対応
そしてstep7のread排除

ver 0.4.14  4:21 2014/04/25 (金)
scanr1,scanl1,error,undefinedも隠して、残る穴（絶対に開くことはないが）はstep7のread
メモリ量を指定するオプションの-mを作成

ver 0.4.13 17:57 2014/04/24 (木)
readも部分関数だったorz
しかもccscとstep7で使っているので割と面倒なことになりそう
ただ、やはりこれは対策の必要があるので重い腰を *下ろして* 頑張るしかない
ということで他のところはreadを隠しておいた
で、step7の対応にはまず安全にIntを返せる数値パーサを作成する必要がある。
ccscはIOなので単純にreadMayを使えばいいがstep7の場合は数値パーサで帰ってきた値なのでreadMayの問題ではないのだ。
ということでccscにreadMayを使ってgraceful failureに変更


ver 0.4.12 19:47 2014/04/23 (水)
Preludeの部分関数を隠した
Base_Step3_IIのメモリ確保のみがheadを使っていたので書き換え
"memory ran out"という永遠に呼び出されることのない運命のerror message挿入
コンパイラオプションで使えるメモリ量を指定できるようにしたら面白いかも

ver 0.4.11  5:05 2014/04/23 (水)
現状のStep3の名前をStep3_IIに変更
warning抜き
ログの単一化

ver 0.4.10 23:44 2014/04/22 (火)
外のスコープと中のスコープで名前が衝突したらどうなるか怖かったが過去(Base_Step4を書いた3/30)の私を舐めてはいけない。
常識的に「名前が見つかるまでスコープを遡る」という作業もしっかり行っている。流石過去の自分。
それを示すテストケースqScopeを作成
あと、実質的なBFとして楽しめず、純粋にテスト用のものの接頭辞をqに決定
あとautotestに於いて逐一successとかを出力して待機時間を減らすように仕様変更。
いざ変更してみるとあまりにも便利なのでもっと早くやっとくべきだったと激しく後悔。

ver 0.4.9  19:46 2014/04/22 (火)
liftをfmap . fmapで定義してグローバルに
<$$>という別名も作成
テストケースにwhileとblockのdeleteの整合性を追加

ver 0.4.8  17:57 2014/04/23 (水)
Step3のblock処理完成
xAtoIの手動逆コンパイル
そろそろ逆コンパイラ作りたいお
ついでにテストケースにも追加

ver 0.4.7  16:49 2014/04/23 (水)
Step3のblock処理以外を完成
Step4を実質上書きする形となり、Camphor.Base_Step4は形骸化
しかし4番目のステップがStep3というのもアレなので整合性をとる必要あり

ver 0.4.6   5:41 2014/04/22 (火)
Step7のeofバグを修正
ついでにStep4にも同様のチェックを追加

ver 0.4.5  20:20 2014/04/21 (月)
pathにghcがあればそちらでコンパイルするようbat\makeHaskellを変更
エスケープシーケンスに\nと\tを追加、テストパターンも。
xEcho__BF_i.txtの命名規則違反を修正

ver 0.4.4  15:06 2014/04/19 (土)
Base_Step3で四苦八苦
スコープのみならずwhile内でdeleteしないのを検出するとかが辛そう

ver 0.4.3  14:04 2014/04/19 (土)
プリプロセス命令内のコメント対応

ver 0.4.2  23:12 2014/04/18 (金)
Step7のエラーチェックを入れたが無駄に緩いので解決が必要
多分eofバグだと思うけど

ver 0.4.1   5:44 2014/04/18 (金)
既存のでもエラーメッセージにファイル名が出るよう工夫した
そしてBase_Step3の外形作成

ver 0.4.0  21:47 2014/04/17 (木)
二重インクルード防止コードで二重インクルード防止できた
自分自身のインポートについてはCと同様禁止しないことにした
これを以って基本的なBase_Step1の開発は終了ということでメジャーバージョンアップ

ver 0.3.19 20:58 2014/04/17 (木)
存在しないファイルを指定した時にエラーを吐くサンプル作成
そして二重インクルード防止コードを書いても防止されないバグ判明
原因は多分マクロがファイルスコープを持っていること
あと自分自身をインポート出来なくする処理の追加も必要

ver 0.3.18 17:41 2014/04/17 (木)
include機構を完成
includeの中身も当然プリプロセスされる
テストケースで確認済み
但し事情により二重インクルード防止はしていない
テストケースでも未確認

ver 0.3.17 23:57 2014/04/16 (水)
includerをconvert1'に分配
そしてbatいじり

ver 0.3.16 23:18 2014/04/16 (水)
IO(FilePath->Maybe String)が出来た
ついでにTxtというシノニム作成
そしてついにincluderをBase_Step1に注入
とは言ってもまだ使っていないけど

ver 0.3.15 22:59 2014/04/16 (水)
モナドを散々こねくり回した結果、IO(FilePath->Maybe String)は作れないようだ
うーむ#includeの予定が狂った
仕方がないのでbatのテストパターンでも増やそう

ver 0.3.14 16:35 2014/04/16 (水)
定型パターンをまとめfailしたときに一時ファイルを消さないようにした

ver 0.3.13 15:51 2014/04/16 (水)
逆コンパイルでテストケースを大量増量
そしてそれらをautotestに追加
でも定型パターンが見えてきたのでそれを更にまとめようか
あとfailしたときはログは消えないようにしたい

ver 0.3.12 12:02 2014/04/16 (水)
batを改良

ver 0.3.11 11:30 2014/04/16 (水)
atoi,itoa,helloを追加。
参考文献も追加したが2chのほうはタイトル取得不可。仕方ないね。
逆コンパイルは後で。

ver 0.3.10  1:33 2014/04/14 (月)
examplesにfibonacciとtoLowerを追加し、参考文献も追加。
toLowerとfibonacciを逆コンパイルするも、fibonacciでaddress error。仕方ないね。
address errorを出さないで警告をソースコードに埋め込むモード作ろうかな
更になんとなく決めていたsuffixの仕様追加

ver 0.3.9  12:35 2014/04/13 (日) 
関数的プリプロセスの仕様を書いた
CamphorScript標準ライブラリを使用変更に対応
そして再編
そして=!~追加

ver 0.3.8  22:13 2014/04/12 (土)
#lineに対応したと思っていたら、文法確認は#lineのロード前に行わられるので無意味
よって対応が必要。多分二段階にプロセスしている時点で負け。
公式のとかを見てみるかなー

ver 0.3.7  21:11 2014/04/12 (土)
コンパイルエラーが出ることを確認するautotesterr.batを作成

ver 0.3.6  16:45 2014/04/12 (土)
Base_Step4をパラレルワールドから移植
R_Base_Step7を作成し、autotestにも対応
但しerrorとか使っているので後で直す

ver 0.3.5   1:06 2014/04/12 (土)
autotest.batに謎のバグ発見
どうやら0時は0埋めされないらしい。
何かifで上手く出来なかったのでfcを使うことに
そして1時になって問題発覚で更に修正

ver 0.3.4  23:31 2014/04/11 (金)
remExtとかいう稚拙な関数の代わりに、
System.FilePathにあり、かつ仕様と合致するreplaceExtensionという関数を使うことに
さすが標準ライブラリ
あとkilljunk.batに注意喚起機能をつけた
注意が嫌なら 以下のようにすれば良い

C:\>echo y^
More?
More? |"!killjunk.bat" > nul 2>&1

ver 0.3.3  23:12 2014/04/11 (金)
autotestにプリプロセス追加&ccsrc追加
更にスパゲッティコードをリフォームして開放感溢れるコードに
testresultに日時出力
そしてkilljunkでtestresultも扱うように


ver 0.3.2  17:55 2014/04/11 (金)
autotest.bat作成
これで自動的にテストできる

ver 0.3.1  17:58 2014/04/09 (水)
%~d0とかSafeとかの関係でコンパイルできなかったので修正
parallel-unused.log作成

ver 0.3.0  17:44 2014/04/09 (水) 
パラレルワールドでの長い夢から覚めて開発再開
なんか向こうでいろいろといじった記憶があるのでその記憶をparallel.logに書き留めた
いやー最後のほうは悪夢だった
ピリオド一文字だけが出力されるってどういうことだ

うん、テストって大事だね。
ただテストって面倒なので【自動でテストしてくれるbatを作ろう】
これで万事解決。

ver 0.2.3  10:19 2014/04/04 (金)
Base_Step1にてコメントがoperatorの判定されて、認識されない問題
色々やってみたが直らないので荒療治として演算子に/を使えなくする
除算？Brainf*ckでは余り需要ないし%とかでいいんじゃない(適当)
そして行コメントが反応しないバグ修正
原因は行ごとに送られてくるので"\n"が反応しないこと
あれ、これじゃあ複数行の複数行コメントが反応しない(あっ、察し)

ver 0.2.2  20:53 2014/04/03 (木)
手動エラー位置出力バグ@Base_Step1修正
原因はOTHERの時に行をインクリメントしていなかったこと

ver 0.2.1  20:36 2014/04/03 (木)
Base_R_Step7を書き始めるも手動でエラーの位置を出力する必要がある
そしてその課題はBase_Step1で未解決なためそちらを先にやろう
…え、なんでバージョンアップかって？そりゃBase_R_Step7の雛形を作ったから

ver 0.2.0  17:06 2014/04/03 (木)
NonNullListを使ってBase_Step4のerrorを完全排除

ver 0.1.19 16:25 2014/04/03 (木)
バグの巣窟Base_Step4のerrorを怪奇なデータ型の作成によりほぼ排除

ver 0.1.18 15:25 2014/04/03 (木)
バグの巣窟Base_Step1のundefinedをEitherモナドでgracefully fail させた

ver 0.1.17 14:22 2014/04/03 (木)
ccsc -o aaa.txt aaa.bfのみならず
ccsc aaa.bf -o aaa.txtにも対応

ver 0.1.16 15:57 2014/04/02 (水)
ccsc -o aaa.bf aaa.txtのみならず
ccsc aaa.txt -o aaa.bfにも対応

ver 0.1.15 19:51 2014/04/01 (火)
#defineが再帰的な(但し自己再帰はしない)置換を起こすように変更
更にC関数型マクロは無視するよう変更(尚なかなかのゴリ押しである)
但し構文エラー系の物のテストが不足しているので気をつけねば
ということでプリプロセスデバッグ用のオプション-Xを作成

ver 0.1.14 23:21 2014/03/31 (月)
ユーザーの不正入力を落とすerrorをSafeにあるabortに変更
残るバグの巣窟はBase_Step4(error)とBase_Step1(\(Right x)->x)

ver 0.1.13 18:25 2014/03/31 (月)
Base_Step1のバグ抜き(型宣言追加)
そしてbyteというparserを追加、これで'a'を読んで97を返してくれる。

ver 0.1.12 11:11 2014/03/31 (月)
ccsrc(R_Step8のみ)完成
-C4などが-C44の意味になるように

ver 0.1.11 11:01 2014/03/31 (月)
R_Step8を作成

ver 0.1.10  9:24 2014/03/31 (月)
IOがぐちゃぐちゃしてきたので書き直し
オプション無しだと-C48で行うよう変更

ver 0.1.9  20:30 2014/03/30 (日)
examplesを別ファイルに
ccsrc(reverse compiler)を作成(途中)


ver 0.1.8  20:15 2014/03/30 (日)
Step4関連のwarning抜き。

ver 0.1.7  18:45 2014/03/30 (日)
writeでREAと出力されていたバグ修正
Step4作成終了
Step5,6を手抜きで作成
main2をccscに改名

ver 0.1.6  15:43 2014/03/30 (日)
Step4を半分作成し、それでparseしたisNumberを保存
I/Oエラーのメッセージを分かりやすく
更にBase_Step1のwarning抜き

ver 0.1.5  12:50 2014/03/30 (日)
大量のサンプルファイル作成
更にstep3-6のファイルだけ作成
ついでに'流れ.txt'に英語訳を付けてコメントとして挿入


ver 0.1.4  21:39 2014/03/29 (土)
main2.hsにIOを突っ込んで実行ファイルを作成。
-C11 -C77 -C78で無事実行に成功。
割とうまく行って驚いている次第である。

ver 0.1.3  21:46 2014/03/26 (水)
型シグネチャとか足したら見づらくなったので7と8を分割

ver 0.1.2  21:15 2014/03/26 (水)
このままではデバッグとリリースの切り替えが面倒なので改良
Baseモジュール(モジュールの本体で、基本的に全てエクスポートする)と
non-Baseモジュール(Baseモジュールをインポートし、必要な物のみをエクスポート)を作る。
あとはmain.hsにてデバッグ時はBaseを、リリース時にはnon-Baseをインポートすればよい。
これならばグローバルモジュールも上手く使えて便利。

ver 0.1.1   7:50 2014/03/26 (水)
example1をより充実させ、step2のファイルだけ作成。

ver 0.1.0   7:20 2014/03/26 (水)
あまりにも汚く面倒くさくなったので0.0.8に差し戻し
C的関数型マクロは採用しないことに
つまりstep1完成ということでstep1モジュール化&位上げ

ver 0.0.9   22:14 2014/03/25 (火)
関数型Cマクロの準備完了
但し今のところ呼ばれたらエラーを吐く仕様

ver 0.0.8   21:13 2014/03/25 (火)
行がずれるとデバッグしにくいのでプリプロセスしたのは"\n"に置換

ver 0.0.7   21:05 2014/03/25 (火)
step1のマクロ置換を行った
(\(Right x)->x)とかいう怖い関数使ったのが気掛かり

ver 0.0.6   19:36 2014/03/25 (火)
step1のマクロ置換以外を行った
エラーを抑えるよりどちらかと言うとエラーを吐かせる方が面倒だ
Cマクロは#define以外は単純なので大変ではなかった
あとincludeは作っていない。何故ならIOが要るから。

ver 0.0.5   13:33 2014/03/25 (火)
step7のwarning抜きを行った。
-Wall -fno-warn-unused-do-bind  -fno-warn-missing-signaturesのオプション。
あとstep1のファイルだけ作成

ver 0.0.4   21:19 2014/03/24 (月)
step7_8をモジュール化してメイン処理はmain.hsで行うことに。

ver 0.0.3   21:11 2014/03/24 (月)
ComCamScrとCPreProcの仕様書を書く。

ver 0.0.2   19:19 2014/03/24 (月)
Step7のところでコメントエスケープを処理するようにしたので:
Before
  ↓Step5(メモリ割り当て&インクリメント最適化)
  ↓Step6(コメントエスケープ)

After
  ↓Step5(メモリ割り当て)
  ↓Step6(インクリメント/デクリメント最適化)


ver 0.0.1   18:34 2014/03/24 (月)
JSだと非常に辛くなるのは十分予想できるのでHaskellで書くことに。
CamphorScript
  ↓Step1(C的マクロ展開)
  ↓Step2(関数的マクロ展開)
  ↓Step3(糖衣構文プリプロセス)
CompiledCamphorScript
  ↓Step4(逐語訳)
  ↓Step5(メモリ割り当て&インクリメント最適化)
  ↓Step6(コメントエスケープ)
nouDarake
  ↓Step7(記号化)
  ↓Step8(空白削除)
Brainf*ck

という流れを決定し、Step7とStep8を完成。


ver 0.0.0   19:25 2014/03/02 (日)
Brainf*ckに翻訳できる言語の名前をCamphorScriptに。
Brain→脳→樟脳→Camphorってこと。

CamphorScript→マクロ展開されたCamphorScript→nouDarake→Brainf*ckと翻訳される。
仕様書は後ほど。