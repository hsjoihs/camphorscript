To do
Step7のエラーメッセージ改良
仕様書のような何かを書き始めたい
ロゴ(Git的な)欲しい
行数ズレ解消したい
エラー検出強力に(関数宣言 No checkはいかん)
GUIラッパ
ccsrcとの統合
warning機能の搭載(WriterTかな?)
zero-checkerといろんな最適化とメモリ位置固定pragma 
GPL付加
Text化
汎用性を上げるためautotestの外部呼び出し以外をHaskell化など
trace参考文献に

ver 0.7.2  10:28 2014/08/21 (木)
--課題--
そろそろ北京仕様書に書いてある様々な最適化をやっていきたい
あとGUIラッパも作っていきたいけどHTAしか無いかな
optotestを終わらせたい
FizzBuzz書きたい
出来れば99 bottles of beer on the wallも -- 6:32 2014/08/20 (水)

--fizzbuzz--
ネットで探したら散々"address is different"が出ていたが遂に出ないのを見つけたので追加 -- 7:09 2014/08/20 (水)
参考文献にも追加 -- 7:10 2014/08/20 (水)
CCSとNDも生成したのでCS書こう -- 7:20 2014/08/20 (水)
割と綺麗になってきたがまだ完全には解読出来てない -- 13:05 2014/08/20 (水)
奇妙なwhileがunlessだったことが判明 -- 13:31 2014/08/20 (水)
僅かな時間を見つけて"Buzz"解読 -- 14:36 2014/08/20 (水)
だいたい解読できた -- 14:55 2014/08/20 (水)
桁上がり分かった -- 16:22 2014/08/20 (水)
抽象化が進むとともにバグも姿を表わすのであった -- 16:27 2014/08/20 (水)
後で検証しなきゃね -- 16:27 2014/08/20 (水)
かなり綺麗になったので完成判定 -- 16:43 2014/08/20 (水)
但しバグの検証が終わるまではautotestへの登録は無し -- 16:43 2014/08/20 (水)

--optotest--
getver.hsを併合 -- 17:42 2014/08/20 (水)
一つのテストをするときは --singleというオプションを付けるように -- 17:46 2014/08/20 (水)
ちょっとコードを圧縮 -- 17:49 2014/08/20 (水)
ファイル分割 -- 18:34 2014/08/20 (水)

--syntax memory allocation bug(仮称)--
IOに飽きたのでfizzbuzz解読中に見つけたバグを潰そう -- 19:07 2014/08/20 (水)
syntax内のusing pragmaが演算子にて解釈されないバグ -- 19:16 2014/08/20 (水)
大体察しはつくけどautotestも肥えるししっかり潰そう -- 19:20 2014/08/20 (水)
さて実行したところ別のバグ(スコープ衝突)も見つけた -- 20:28 2014/08/20 (水)
取りあえず、まずは一つ目を先に潰し、二つ目は後回し -- 20:32 2014/08/20 (水)
SimplyReplaceRVCにおいての再帰の巡りが悪いのかもね -- 20:45 2014/08/20 (水)
型をいじって再帰の巡りを良くするが、色々不安である -- 20:58 2014/08/20 (水)
autotestは見事に失敗、作業が増えてしまうではないか -- 21:01 2014/08/20 (水)
怖いが型をもう一度いじってautotestに挑戦してみよう --  6:01 2014/08/21 (木)
仕方がないので一度差し戻してautotestを復活させよう --  6:03 2014/08/21 (木)
復活した。これからは軽率な行為を慎みデバッグせねば --  6:07 2014/08/21 (木)
変数名をtmp_to_be_debuggedに変えて黒魔術デバッグだ --  6:13 2014/08/21 (木)
traceしたらusingが空になっていたでござる。原因不明 --  6:28 2014/08/21 (木)
上手くいくかは知らないがokなのも出力して検証しよう --  6:31 2014/08/21 (木)
与える変数を増やしたら上手く行った。訳が分からない --  6:36 2014/08/21 (木)
どうやら内部の呼び出しで変数プールが消費されている --  6:40 2014/08/21 (木)
trace無しでは気づかなかった。trace参考文献にしよう --  6:41 2014/08/21 (木)
さて本題に戻ると、pragmaで変数補充すればいいのでは --  6:51 2014/08/21 (木)
はい直りました。autotestに通す……ログ消し忘れてた --  6:54 2014/08/21 (木)
逆に考えるんだ、autotestでも消し忘れが検出できると --  6:55 2014/08/21 (木)
autotest通ったのでログ消して再挑戦。当然の如く通る --  7:00 2014/08/21 (木)
今回のテスト例をautotest登録しよう。さて名は如何に --  7:01 2014/08/21 (木)
qUsingInheritとかでいいだろう。ミソはusingなんだし --  7:04 2014/08/21 (木)
autotestに登録したので再度autotest。当然ながら通る --  7:11 2014/08/21 (木)

--syntax & using varname collision bug(仮称)--
さて二つ目のバグ。こちらはスコープ衝突無限ループ系なので深刻だ --  7:16 2014/08/21 (木)
黒魔術を仕掛けたいところだがどこに仕込むべきなのかが分からない --  7:57 2014/08/21 (木)
正常時と異常時を出力して差を探すところから始めていくしかないか --  8:44 2014/08/21 (木)
どうやらsyntaxとusing pragmaの衝突以外は問題なさそうだ←今さら --  8:58 2014/08/21 (木)
repltableとかinstnceを吐いてみたが異常時と正常時に全く差がない --  9:00 2014/08/21 (木)
syntax内でusingはしていないし、using用変数補充は原因ではないな --  9:09 2014/08/21 (木)
usingとclTableにも異常は見つからないので、置き換え処理に問題か --  9:23 2014/08/21 (木)
なるほど原因解明、collision->replacementか、それなら仕方がない --  9:26 2014/08/21 (木)
そもそも、usingはcollisionに入れちゃいけないのでは無いだろうか --  9:29 2014/08/21 (木)
ということで、かなり前に行き渡らせたMaybe ()を上書きしてみよう --  9:32 2014/08/21 (木)
上書きして色んな処理にusingTableを対応させてみた。さてテストだ --  9:44 2014/08/21 (木)
ログ出てるが成功したようだ。さてお次は今回のテスト例でテストだ --  9:47 2014/08/21 (木)
テスト例も無事直ったので後はコードのお掃除とautotestの登録だけ --  9:48 2014/08/21 (木)
掃除してautotestが通ってfizzbuzzいじって成功して残るは登録だけ --  9:59 2014/08/21 (木)
名前はqSynUseCollisionでいいか(適当)。大体察しがつく名と言える -- 10:03 2014/08/21 (木)
qSynUseCollisionを登録、autotest通す。残るはfizzbuzzのみとなる -- 10:14 2014/08/21 (木)
fizzbuzz登録、autotest一度凡ミスするも直し二度目でちゃんと通る -- 10:25 2014/08/21 (木)

--テンプレ--
autotesterr通す -- 10:28 2014/08/21 (木)



ver 0.7.1  23:14 2014/08/19 (火)
--課題--
そろそろ北京仕様書に書いてある様々な最適化をやっていきたい
あとGUIラッパも作っていきたいけどC#しか無いかな
warningもいいけど既存のコードを大幅に変えなきゃね -- 15:10 2014/08/18 (月)

--IO--
-run オプションが付いているときは、-oの指定がなくても自動的に-o nulとなるように -- 15:27 2014/08/18 (月)

--zero-checker--
assert_zeroを増やそう -- 15:31 2014/08/18 (月)
そのためにBase_Step3_IIをお掃除 -- 15:38 2014/08/18 (月)
そして恒例のconcat <$> many sentences -- 15:49 2014/08/18 (月)
autotestは-C48なので通る -- 15:52 2014/08/18 (月)
autotesterr通る -- 15:55 2014/08/18 (月)
ループの直後のassertは出来たが残りをどうしよう -- 16:21 2014/08/18 (月)
出来るだけassertを入れたいからといって入れすぎても困る
assert_zero_startとassert_zero_endでも作ろうかな -- 16:22 2014/08/18 (月)

--interpreter--
pureIntepreterの動作確認(xIsNumber) -- 16:30 2014/08/18 (月)

--warning--
データ構造いじることになるけど最適化ほどは面倒じゃないはず -- 18:16 2014/08/18 (月)
その前にモナド変換子を一括してCamphor.Transformerにまとめる -- 19:04 2014/08/18 (月)
TupleTransはTransformerに併合 -- 19:08 2014/08/18 (月)
Listlikeもいじってみたけど結局現状維持 -- 19:20 2014/08/18 (月)
さてWriterのお出ましだ -- 19:21 2014/08/18 (月)
正直step1と2以外でwarning要らないと思うんだよね【←傲慢な予言】 -- 19:22 2014/08/18 (月)
ということでその2つにだけ採用 -- 19:23 2014/08/18 (月)
ccscにwarningを対応させた -- 19:59 2014/08/18 (月)
autotest通す -- 20:04 2014/08/18 (月)
autotesterr通す -- 20:08 2014/08/18 (月)

--warning part2--
まずはコメント内コメントからやっていこう -- 21:17 2014/08/18 (月)
Base_Step1にwarning対策出来た -- 21:37 2014/08/18 (月)
liftを塗りたくるだけの簡単なお仕事 -- 21:37 2014/08/18 (月)
…コメントってconvertじゃないからなー面倒だなー -- 22:36 2014/08/18 (月)
そうだ、予行演習として#warning directiveを作ろう -- 22:39 2014/08/18 (月)
出来た -- 23:01 2014/08/18 (月)
実験したら何か逆に出る -- 23:04 2014/08/18 (月)
納得行かないが直った -- 23:12 2014/08/18 (月)
で、気づいたのだが行数が1ズレてる -- 23:16 2014/08/18 (月)
直した -- 23:16 2014/08/18 (月)
ついでに#error directiveも作ろう -- 23:19 2014/08/18 (月)
出来た -- 23:29 2014/08/18 (月)
autotest通す -- 23:33 2014/08/18 (月)
autotesterr通す -- 23:36 2014/08/18 (月)

--warning part3--
じゃあ-Wnum 30を実装しよう -- 6:30 2014/08/19 (火)
出来た -- 7:04 2014/08/19 (火)
autotest通る -- 7:14 2014/08/19 (火)
autotesterr通る -- 7:17 2014/08/19 (火)

--BF autotest--
そろそろBF autotestに入らねば
なんせすべき最適化は山のようにある -- 17:06 2014/08/19 (火)
interpreterがHaskellなんだし、autotest自体をHaskellで作ろう -- 17:25 2014/08/19 (火)
名前はautotestと語呂が良いoptotest -- 17:26 2014/08/19 (火)
ccsc.hsのmain以外を取り出して別ファイルに -- 20:52 2014/08/19 (火)
optotest多分書けた -- 22:58 2014/08/19 (火)
実行した結果成功・失敗ともに正常に作動 -- 23:12 2014/08/19 (火)
optotest "-C11 examples\__CS\xIsNumber__CS.txt -o nul" examples\optotest\IsNumberTest.txtで動く -- 23:13 2014/08/19 (火)
…まあ1ファイルに5秒以上かかるけど -- 23:13 2014/08/19 (火)
さてverUpしよう -- 23:14 2014/08/19 (火)


ver 0.7.0  14:59 2014/08/18 (月)
--課題--
そろそろ北京仕様書に書いてある様々な最適化をやっていきたい
あとGUIラッパも作っていきたいけどC#しか無いかな -- 20:54 2014/08/16 (土)
あとBF interpreter in Haskell
まあネットから引いてきてもいいけど、自分にとって使いやすいのを選ぶより書くほうが速そう -- 20:57 2014/08/16 (土)
warningもいいけど既存のコードを大幅に変えなきゃね -- 21:06 2014/08/16 (土)

--hlint--
Hlintとかいう楽しいツールをゲット -- 21:30 2014/08/16 (土)
試してみよう -- 21:30 2014/08/16 (土)
ccscでいきなり3つですか -- 21:31 2014/08/16 (土)
直した -- 21:33 2014/08/16 (土)
ccsrcは1つ -- 21:34 2014/08/16 (土)
…とかやってたらBase_Step1で34個、これは楽しみ。 -- 21:43 2014/08/16 (土)
2以外Base終わり -- 22:00 2014/08/16 (土)
2終わり -- 22:20 2014/08/16 (土)
Global終わり -- 22:22 2014/08/16 (土)
Rも通した -- 22:27 2014/08/16 (土)
autotest通る -- 22:36 2014/08/16 (土)
autotesterr通る -- 22:40 2014/08/16 (土)

--オプション--
予め-fと-Wを作っておこう
あと-0.6というオプションも作ろう -- 7:37 2014/08/17 (日)
-f出来た -- 7:53 2014/08/17 (日)
-W出来た -- 8:07 2014/08/17 (日)

--module--
モジュールの依存関係の図を作って資料に入れた -- 17:14 2014/08/17 (日)
Global.Operatorが意外にもいらない子だったのでSafePreludeに統合 -- 17:15 2014/08/17 (日)
Warn.hsを微増 -- 17:29 2014/08/17 (日)

--interpreter--
まずはparserを作ろう -- 17:29 2014/08/17 (日)
ユーザ用のinterpreterが出来た -- 12:57 2014/08/18 (月)
関数用だけどどうしようかな -- 13:16 2014/08/18 (月)
Just for funでVirtualIOとか作ってみるか -- 13:17 2014/08/18 (月)
やめた -- 13:21 2014/08/18 (月)
出来た -- 13:44 2014/08/18 (月)
で、思ったんだけど大体は処理が一致してるから型クラスで出来そう -- 13:44 2014/08/18 (月)
test用のinterpreterも出来た -- 14:20 2014/08/18 (月)
あとはccscに-runというオプションを付けるのみ -- 14:20 2014/08/18 (月)
付けた -- 14:47 2014/08/18 (月)
runつけてると出力されるコードが邪魔なのでnulデバイス作ろう -- 14:49 2014/08/18 (月)
作った -- 14:50 2014/08/18 (月)

--テンプレ--
autotest通る -- 14:56 2014/08/18 (月)
autotesterr通る -- 14:59 2014/08/18 (月)



ver 0.6.29   19:27 2014/08/16 (土)
--課題--
明示再帰が気になるので何とかfoldrに出来ないものか
オプション無しだと-C48で行うのを変更

--FIXME狩り--
UIに疲れたのでfixmeの修正しますかね
「整数が枯渇するかも」というエラーメッセージはErrListにおいて
Step2 <!> Impossible <!> Integerranoutに -- 15:05 2014/08/15 (金)
残りは一つ、deleteTopVFBlock
前の方でaddしてるのを消してるだけだからエラーは吐かないはず
じゃあ前の状態を復帰すればいいよね
どうせ他の関数でtopじゃないVFBlockいじったりしてないはずだし
…removeIdentがいじってるぅ -- 15:20 2014/08/15 (金)
但しその前の分岐がcontainsIdentだからすぐ直せるはず -- 15:21 2014/08/15 (金)
removeIdentとかいう怖い関数削除 -- 15:26 2014/08/15 (金)
さてこれでnon-topなVFBlockはいじられていないことが分かったので安心して復帰しよう -- 15:27 2014/08/15 (金)
よし出来た、これでエラーには全て(SyntaxError除く)連番出来た -- 15:30 2014/08/15 (金)
autotest通る -- 15:37 2014/08/15 (金)
autotesterr通る -- 15:42 2014/08/15 (金)

--beautify--
UserStateって内部実装見えてないし、prettyにしようかな
レコード構文でいいか -- 16:29 2014/08/15 (金)
書けた -- 16:45 2014/08/15 (金)
あとTop以外のVFBlockいじるのってaddぐらいなんだよね -- 16:45 2014/08/15 (金)
じゃあ分離しよう -- 16:46 2014/08/15 (金)
やっぱやめた -- 16:52 2014/08/15 (金)
わざわざ分離せずとも、パターン化すれば良い -- 16:52 2014/08/15 (金)
他にもちょこちょこいじる -- 17:09 2014/08/15 (金)
complexとやらがcomplex過ぎて訳がわからない -- 17:15 2014/08/15 (金)
ということで第一new群をStateに引き入れよう -- 17:17 2014/08/15 (金)
complexが簡単になった -- 17:36 2014/08/15 (金)
complexをdefineという名に -- 17:39 2014/08/15 (金)
newCとかをdefCという名に -- 17:55 2014/08/15 (金)
newK1系統をcallとして独立させたいが中でconvert呼んでるから出来ない
そしてこの再帰は非常に面倒
…そうだ、convert関数自体をStateで回そう(斬新) -- 18:06 2014/08/15 (金)
Stateで回すの面倒なので明示的に引数で渡そう -- 18:11 2014/08/15 (金)
できたけどStateに戻そう -- 18:33 2014/08/15 (金)
Callにやっと対応した -- 18:45 2014/08/15 (金)
Base_Step2に対応した -- 18:48 2014/08/15 (金)
complex2をcallと命名 -- 18:50 2014/08/15 (金)

--IO--
オプション無しだと-C48で行うのを変更 -- 19:16 2014/08/15 (金)

--Err連番--
出力用にerrpathを出す関数作成
いやーshowは偉大なり -- 19:45 2014/08/15 (金)

--ccsc--
Stepを外す -- 19:45 2014/08/15 (金)
autotest通す -- 19:52 2014/08/15 (金)
autotesterr通す -- 19:56 2014/08/15 (金)

--Err連番--
さーてErr連番を本格的にやっていかねばverUpは望めない -- 20:04 2014/08/15 (金)
ということでnotdefinedfuncまでやったが次のnotdefinedopがnoinstanceopと同じになってしまう -- 20:26 2014/08/15 (金)
fixityのみが定義されてる時はnotdefinedがいいな -- 20:33 2014/08/15 (金)
確かにそういう実装だった気もする改善したほうが親切だと思うし改善しよう -- 20:26 2014/08/15 (金)
…wrongcallにfixnotdefinedが無いのか、直そう -- 20:34 2014/08/15 (金)
autotest通…らない。
どうやら判定の場所が間違っていたらしいので再挑戦 -- 20:43 2014/08/15 (金)
autotest通る -- 20:46 2014/08/15 (金)
autotesterr…通らない(´；ω；｀) -- 20:49 2014/08/15 (金)
過去ログ見たら前のも通ってない -- 20:50 2014/08/15 (金)
…さて、それは後で直すとして残りのをやっていきましょう←え -- 20:51 2014/08/15 (金)
残りのをやった -- 21:13 2014/08/15 (金)
autotest通す -- 21:15 2014/08/15 (金)
autotesterr通らない -- 21:51 2014/08/15 (金)
state渡し忘れてる -- 21:53 2014/08/15 (金)
changeStateは対策済みなのでそちらに切り替え -- 21:55 2014/08/15 (金)
autotesterr通る -- 21:59 2014/08/15 (金)
連番振る -- 22:02 2014/08/15 (金)
しかし、今あるエラー48通りのうちファイルがあったのは24個、つまり丁度半分 -- 22:05 2014/08/15 (金)
autotest通す -- 22:05 2014/08/15 (金)
残りの24個のサンプルを作っていくのもこれまた面倒くさそうだ -- 22:07 2014/08/15 (金)
autotesterr通す -- 22:09 2014/08/15 (金)

--Err連番2--
28まで出来た -- 10:24 2014/08/16 (土)
33まで出来た -- 10:42 2014/08/16 (土)
35まで出来た -- 10:55 2014/08/16 (土)
autotest通す -- 10:58 2014/08/16 (土)
autotesterr  -- 11:02 2014/08/16 (土)
38まで出来た -- 11:15 2014/08/16 (土)
42まで出来た -- 11:25 2014/08/16 (土)
…さて、残りは再現可能か？ -- 11:27 2014/08/16 (土)
"2 type-matching instance ～"はそもそもdefineで弾いてるはずだし、
left side of～は意味不明
integer ran outは不可能 -- 11:28 2014/08/16 (土)
…よし、verUpだ。 -- 11:28 2014/08/16 (土)
autotest通す -- 11:33 2014/08/16 (土)
autotesterr通す -- 11:34 2014/08/16 (土)







ver 0.6.28  23:00 2014/08/13 (水)
--課題--
エラー連番を更に進める
明示再帰が気になるので何とかfoldrに出来ないものか
オプション無しだと-C48で行うのを変更
Base_Step2の分割をもう少し綺麗に

--Base_Step2の分割--
まずUserStateはUserStateのみを扱うべき
よって残りを分割
但し直にAuxilaryに入れるとlengthが軽く万を突破するので便宜上Auxilary2というファイル作成
分離完了 -- 14:02 2014/08/13 (水)

--エラー連番--
ちょっと追加 -- 16:25 2014/08/13 (水)
更に追加、残り36個 -- 17:32 2014/08/13 (水)
33個 -- 17:43 2014/08/13 (水)
…さーて、"identifier is already defined"ってTypeにすべきか新しく設けるべきか -- 17:52 2014/08/13 (水)
というかTypeっていう名称がおかしい気がする -- 18:10 2014/08/13 (水)
Function/Syntax/Operを全般的にTypeと呼んでるだけ
FSOの方が正しいんだろうけど今はいいや -- 18:11 2014/08/13 (水)
ということで"identifier is already defined"はAccessという名前で新しく設けよう -- 18:13 2014/08/13 (水)
26個 -- 18:54 2014/08/13 (水)
24個、ここでnulldefinedエラーの時に表示するopをquoteするというbug fixも行う -- 19:10 2014/08/13 (水)
20個 -- 19:27 2014/08/13 (水)
autotesterr通る -- 19:30 2014/08/13 (水)
autotest通る -- 19:34 2014/08/13 (水)
19個、「cannot define function "a"inside」を「cannot define function "a" inside」に修正 -- 19:40 2014/08/13 (水)
"cannot call function "++showIdent i++" because it is defined as a variable"っておかしいよね
"cannot call "++showIdent i++" as a function because it is defined as a variable"だよね
18個、そして上のをsyntaxにも新たに付与した -- 19:58 2014/08/13 (水)
"identifier is not defined"じゃなくて"cannot delete ～"の方がいいよね
13個、そして上のを色んなとこに適用 -- 20:28 2014/08/13 (水)
なおFIXMEが2個あるので正確には残り11個 -- 20:33 2014/08/13 (水)
autotest通る -- 20:33 2014/08/13 (水)
autotesterr通る -- 20:36 2014/08/13 (水)
block終了時に削除されていないidentifierを表示するように -- 20:54 2014/08/13 (水)
10個 -- 20:56 2014/08/13 (水)
7個、pragmaのエラーメッセージを改良 -- 21:55 2014/08/13 (水)
5個 -- 22:12 2014/08/13 (水)
3個 -- 22:27 2014/08/13 (水)
2個 -- 22:39 2014/08/13 (水)
1個 -- 22:46 2014/08/13 (水)
完了 -- 22:51 2014/08/13 (水)
なおここまで5時間超えである(食事など含む)
いやーUIは時間が掛かる
autotest通す -- 22:56 2014/08/13 (水)
autotesterr通す -- 23:00 2014/08/13 (水)
もういいやverUpしよう -- 23:00 2014/08/13 (水)