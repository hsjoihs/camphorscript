To do
Base_Step3の名前を変更
エラーテスト充実化
ログの単一化

ver 0.4.10 23:44 2014/04/22 (火)
外のスコープと中のスコープで名前が衝突したらどうなるか怖かったが過去(Base_Step4を書いた3/30)の私を舐めてはいけない。
常識的に「名前が見つかるまでスコープを遡る」という作業もしっかり行っている。流石過去の自分。
それを示すテストケースqScopeを作成
あと、実質的なBFとして楽しめず、純粋にテスト用のものの接頭辞をqに決定
あとautotestに於いて逐一successとかを出力して待機時間を減らすように仕様変更。
いざ変更してみるとあまりにも便利なのでもっと早くやっとくべきだったと激しく後悔。

ver 0.4.9  19:46 2014/04/22 (火)
liftをfmap . fmapで定義してグローバルに
<$$>という別名も作成
テストケースにwhileとblockのdeleteの整合性を追加

ver 0.4.8  17:57 2014/04/23 (水)
Step3のblock処理完成
xAtoIの手動逆コンパイル
そろそろ逆コンパイラ作りたいお
ついでにテストケースにも追加

ver 0.4.7  16:49 2014/04/23 (水)
Step3のblock処理以外を完成
Step4を実質上書きする形となり、Camphor.Base_Step4は形骸化
しかし4番目のステップがStep3というのもアレなので整合性をとる必要あり

ver 0.4.6   5:41 2014/04/22 (火)
Step7のeofバグを修正
ついでにStep4にも同様のチェックを追加

ver 0.4.5  20:20 2014/04/21 (月)
pathにghcがあればそちらでコンパイルするようbat\makeHaskellを変更
エスケープシーケンスに\nと\tを追加、テストパターンも。
xEcho__BF_i.txtの命名規則違反を修正

ver 0.4.4  15:06 2014/04/19 (土)
Base_Step3で四苦八苦
スコープのみならずwhile内でdeleteしないのを検出するとかが辛そう

ver 0.4.3  14:04 2014/04/19 (土)
プリプロセス命令内のコメント対応

ver 0.4.2  23:12 2014/04/18 (金)
Step7のエラーチェックを入れたが無駄に緩いので解決が必要
多分eofバグだと思うけど

ver 0.4.1   5:44 2014/04/18 (金)
既存のでもエラーメッセージにファイル名が出るよう工夫した
そしてBase_Step3の外形作成

ver 0.4.0  21:47 2014/04/17 (木)
二重インクルード防止コードで二重インクルード防止できた
自分自身のインポートについてはCと同様禁止しないことにした
これを以って基本的なBase_Step1の開発は終了ということでメジャーバージョンアップ

ver 0.3.19 20:58 2014/04/17 (木)
存在しないファイルを指定した時にエラーを吐くサンプル作成
そして二重インクルード防止コードを書いても防止されないバグ判明
原因は多分マクロがファイルスコープを持っていること
あと自分自身をインポート出来なくする処理の追加も必要

ver 0.3.18 17:41 2014/04/17 (木)
include機構を完成
includeの中身も当然プリプロセスされる
テストケースで確認済み
但し事情により二重インクルード防止はしていない
テストケースでも未確認

ver 0.3.17 23:57 2014/04/16 (水)
includerをconvert1'に分配
そしてbatいじり

ver 0.3.16 23:18 2014/04/16 (水)
IO(FilePath->Maybe String)が出来た
ついでにTxtというシノニム作成
そしてついにincluderをBase_Step1に注入
とは言ってもまだ使っていないけど

ver 0.3.15 22:59 2014/04/16 (水)
モナドを散々こねくり回した結果、IO(FilePath->Maybe String)は作れないようだ
うーむ#includeの予定が狂った
仕方がないのでbatのテストパターンでも増やそう

ver 0.3.14 16:35 2014/04/16 (水)
定型パターンをまとめfailしたときに一時ファイルを消さないようにした

ver 0.3.13 15:51 2014/04/16 (水)
逆コンパイルでテストケースを大量増量
そしてそれらをautotestに追加
でも定型パターンが見えてきたのでそれを更にまとめようか
あとfailしたときはログは消えないようにしたい

ver 0.3.12 12:02 2014/04/16 (水)
batを改良

ver 0.3.11 11:30 2014/04/16 (水)
atoi,itoa,helloを追加。
参考文献も追加したが2chのほうはタイトル取得不可。仕方ないね。
逆コンパイルは後で。

ver 0.3.10  1:33 2014/04/14 (月)
examplesにfibonacciとtoLowerを追加し、参考文献も追加。
toLowerとfibonacciを逆コンパイルするも、fibonacciでaddress error。仕方ないね。
address errorを出さないで警告をソースコードに埋め込むモード作ろうかな
更になんとなく決めていたsuffixの仕様追加

ver 0.3.9  12:35 2014/04/13 (日) 
関数的プリプロセスの仕様を書いた
CamphorScript標準ライブラリを使用変更に対応
そして再編
そして=!~追加

ver 0.3.8  22:13 2014/04/12 (土)
#lineに対応したと思っていたら、文法確認は#lineのロード前に行わられるので無意味
よって対応が必要。多分二段階にプロセスしている時点で負け。
公式のとかを見てみるかなー

ver 0.3.7  21:11 2014/04/12 (土)
コンパイルエラーが出ることを確認するautotesterr.batを作成

ver 0.3.6  16:45 2014/04/12 (土)
Base_Step4をパラレルワールドから移植
R_Base_Step7を作成し、autotestにも対応
但しerrorとか使っているので後で直す

ver 0.3.5   1:06 2014/04/12 (土)
autotest.batに謎のバグ発見
どうやら0時は0埋めされないらしい。
何かifで上手く出来なかったのでfcを使うことに
そして1時になって問題発覚で更に修正

ver 0.3.4  23:31 2014/04/11 (金)
remExtとかいう稚拙な関数の代わりに、
System.FilePathにあり、かつ仕様と合致するreplaceExtensionという関数を使うことに
さすが標準ライブラリ
あとkilljunk.batに注意喚起機能をつけた
注意が嫌なら 以下のようにすれば良い

C:\>echo y^
More?
More? |"!killjunk.bat" > nul 2>&1

ver 0.3.3  23:12 2014/04/11 (金)
autotestにプリプロセス追加&ccsrc追加
更にスパゲッティコードをリフォームして開放感溢れるコードに
testresultに日時出力
そしてkilljunkでtestresultも扱うように


ver 0.3.2  17:55 2014/04/11 (金)
autotest.bat作成
これで自動的にテストできる

ver 0.3.1  17:58 2014/04/09 (水)
%~d0とかSafeとかの関係でコンパイルできなかったので修正
parallel-unused.log作成

ver 0.3.0  17:44 2014/04/09 (水) 
パラレルワールドでの長い夢から覚めて開発再開
なんか向こうでいろいろといじった記憶があるのでその記憶をparallel.logに書き留めた
いやー最後のほうは悪夢だった
ピリオド一文字だけが出力されるってどういうことだ

うん、テストって大事だね。
ただテストって面倒なので【自動でテストしてくれるbatを作ろう】
これで万事解決。

ver 0.2.3  10:19 2014/04/04 (金)
Base_Step1にてコメントがoperatorの判定されて、認識されない問題
色々やってみたが直らないので荒療治として演算子に/を使えなくする
除算？Brainf*ckでは余り需要ないし%とかでいいんじゃない(適当)
そして行コメントが反応しないバグ修正
原因は行ごとに送られてくるので"\n"が反応しないこと
あれ、これじゃあ複数行の複数行コメントが反応しない(あっ、察し)

ver 0.2.2  20:53 2014/04/03 (木)
手動エラー位置出力バグ@Base_Step1修正
原因はOTHERの時に行をインクリメントしていなかったこと

ver 0.2.1  20:36 2014/04/03 (木)
Base_R_Step7を書き始めるも手動でエラーの位置を出力する必要がある
そしてその課題はBase_Step1で未解決なためそちらを先にやろう
…え、なんでバージョンアップかって？そりゃBase_R_Step7の雛形を作ったから

ver 0.2.0  17:06 2014/04/03 (木)
NonNullListを使ってBase_Step4のerrorを完全排除

ver 0.1.19 16:25 2014/04/03 (木)
バグの巣窟Base_Step4のerrorを怪奇なデータ型の作成によりほぼ排除

ver 0.1.18 15:25 2014/04/03 (木)
バグの巣窟Base_Step1のundefinedをEitherモナドでgracefully fail させた

ver 0.1.17 14:22 2014/04/03 (木)
ccsc -o aaa.txt aaa.bfのみならず
ccsc aaa.bf -o aaa.txtにも対応

ver 0.1.16 15:57 2014/04/02 (水)
ccsc -o aaa.bf aaa.txtのみならず
ccsc aaa.txt -o aaa.bfにも対応

ver 0.1.15 19:51 2014/04/01 (火)
#defineが再帰的な(但し自己再帰はしない)置換を起こすように変更
更にC関数型マクロは無視するよう変更(尚なかなかのゴリ押しである)
但し構文エラー系の物のテストが不足しているので気をつけねば
ということでプリプロセスデバッグ用のオプション-Xを作成

ver 0.1.14 23:21 2014/03/31 (月)
ユーザーの不正入力を落とすerrorをSafeにあるabortに変更
残るバグの巣窟はBase_Step4(error)とBase_Step1(\(Right x)->x)

ver 0.1.13 18:25 2014/03/31 (月)
Base_Step1のバグ抜き(型宣言追加)
そしてbyteというparserを追加、これで'a'を読んで97を返してくれる。

ver 0.1.12 11:11 2014/03/31 (月)
ccsrc(R_Step8のみ)完成
-C4などが-C44の意味になるように

ver 0.1.11 11:01 2014/03/31 (月)
R_Step8を作成

ver 0.1.10  9:24 2014/03/31 (月)
IOがぐちゃぐちゃしてきたので書き直し
オプション無しだと-C48で行うよう変更

ver 0.1.9  20:30 2014/03/30 (日)
examplesを別ファイルに
ccsrc(reverse compiler)を作成(途中)


ver 0.1.8  20:15 2014/03/30 (日)
Step4関連のwarning抜き。

ver 0.1.7  18:45 2014/03/30 (日)
writeでREAと出力されていたバグ修正
Step4作成終了
Step5,6を手抜きで作成
main2をccscに改名

ver 0.1.6  15:43 2014/03/30 (日)
Step4を半分作成し、それでparseしたisNumberを保存
I/Oエラーのメッセージを分かりやすく
更にBase_Step1のwarning抜き

ver 0.1.5  12:50 2014/03/30 (日)
大量のサンプルファイル作成
更にstep3-6のファイルだけ作成
ついでに'流れ.txt'に英語訳を付けてコメントとして挿入


ver 0.1.4  21:39 2014/03/29 (土)
main2.hsにIOを突っ込んで実行ファイルを作成。
-C11 -C77 -C78で無事実行に成功。
割とうまく行って驚いている次第である。

ver 0.1.3  21:46 2014/03/26 (水)
型シグネチャとか足したら見づらくなったので7と8を分割

ver 0.1.2  21:15 2014/03/26 (水)
このままではデバッグとリリースの切り替えが面倒なので改良
Baseモジュール(モジュールの本体で、基本的に全てエクスポートする)と
non-Baseモジュール(Baseモジュールをインポートし、必要な物のみをエクスポート)を作る。
あとはmain.hsにてデバッグ時はBaseを、リリース時にはnon-Baseをインポートすればよい。
これならばグローバルモジュールも上手く使えて便利。

ver 0.1.1   7:50 2014/03/26 (水)
example1をより充実させ、step2のファイルだけ作成。

ver 0.1.0   7:20 2014/03/26 (水)
あまりにも汚く面倒くさくなったので0.0.8に差し戻し
C的関数型マクロは採用しないことに
つまりstep1完成ということでstep1モジュール化&位上げ

ver 0.0.9   22:14 2014/03/25 (火)
関数型Cマクロの準備完了
但し今のところ呼ばれたらエラーを吐く仕様

ver 0.0.8   21:13 2014/03/25 (火)
行がずれるとデバッグしにくいのでプリプロセスしたのは"\n"に置換

ver 0.0.7   21:05 2014/03/25 (火)
step1のマクロ置換を行った
(\(Right x)->x)とかいう怖い関数使ったのが気掛かり

ver 0.0.6   19:36 2014/03/25 (火)
step1のマクロ置換以外を行った
エラーを抑えるよりどちらかと言うとエラーを吐かせる方が面倒だ
Cマクロは#define以外は単純なので大変ではなかった
あとincludeは作っていない。何故ならIOが要るから。

ver 0.0.5   13:33 2014/03/25 (火)
step7のwarning抜きを行った。
-Wall -fno-warn-unused-do-bind  -fno-warn-missing-signaturesのオプション。
あとstep1のファイルだけ作成

ver 0.0.4   21:19 2014/03/24 (月)
step7_8をモジュール化してメイン処理はmain.hsで行うことに。

ver 0.0.3   21:11 2014/03/24 (月)
ComCamScrとCPreProcの仕様書を書く。

ver 0.0.2   19:19 2014/03/24 (月)
Step7のところでコメントエスケープを処理するようにしたので:
Before
  ↓Step5(メモリ割り当て&インクリメント最適化)
  ↓Step6(コメントエスケープ)

After
  ↓Step5(メモリ割り当て)
  ↓Step6(インクリメント/デクリメント最適化)


ver 0.0.1   18:34 2014/03/24 (月)
JSだと非常に辛くなるのは十分予想できるのでHaskellで書くことに。
CamphorScript
  ↓Step1(C的マクロ展開)
  ↓Step2(関数的マクロ展開)
  ↓Step3(糖衣構文プリプロセス)
CompiledCamphorScript
  ↓Step4(逐語訳)
  ↓Step5(メモリ割り当て&インクリメント最適化)
  ↓Step6(コメントエスケープ)
nouDarake
  ↓Step7(記号化)
  ↓Step8(空白削除)
Brainf*ck

という流れを決定し、Step7とStep8を完成。


ver 0.0.0   19:25 2014/03/02 (日)
Brainf*ckに翻訳できる言語の名前をCamphorScriptに。
Brain→脳→樟脳→Camphorってこと。

CamphorScript→マクロ展開されたCamphorScript→nouDarake→Brainf*ckと翻訳される。
仕様書は後ほど。