#include <stdcalc2>
#define V1 *# MEMORY using v_1 #*
#define V2 *# MEMORY using v_2 #*
#define V3 *# MEMORY using v_3 #*
#define V4 *# MEMORY using v_4 #*
#define V8 *# MEMORY using v_8 #*
#define V78 *# MEMORY using v_7 v_8 #*
infixr 5 (<-);
infixl 0 (,!);

void debug(char& a,constant char N)
{
	char t; t += N;
	while(t)
	{
		char tmp = '%'; write(tmp); 
		a += '0'; write(a); a -= '0';
		write(tmp); clear(tmp); delete tmp; 
		t -= 1;
	}
	delete t;
}

void (<-)(char& top,char& bot;char& input) // bot needs to be cleared; top doesn't
{
#define v1 bot
	char v2,v3,flg; /*# MEMORY using v2 #*/ v1 += input; clear(top); v2 += 9;
	// v1 = input; v2 = 9; top = 0;
	while(v1){
		flg += 1;       //  ----|
		while(v2){      //      |
			v3 += 1;    //      |
			clear(flg); //      |---- /V3/ if(v2){clear(flg);}
			v2 -= 1;    //      |
		}               //      |
		v2 +=~ v3;      //  ----|
		
		while(flg){ //  ----|
            v2+=10; //      |
            top+=1; //      |----  else{v2 += 10; top += 1;}  
            flg-=1; //      |
        }           //  ----|
        v2-=1;
        v1-=1;
	}
	v1+=9;
    bot -=~ v2; 
	delete v2;delete v3;delete flg;
#undef v1 	
}

// tru = top; fals = ! ~top
void nazo(char& tru, ! char& fals,~char& orig) // tru and fals must be 0
{
	fals += 1;
	while(orig){
		clear(fals);
		tru += 1;
		orig -= 1;
	} 
}

void nazo2(char& tru,! char& fals ,~ char& bool_)//bool must be 0 or 1; 
{
	clear(fals); fals += 1;
	while(bool_){
		tru += 1;
		fals -= 1;
		bool_ -= 1;
	}
}
infixr 5 (&&=!~);
void (&&=!~)(char& orig; char& new_)
{
    if(~new_){ // if(new_)
        clear(orig);
    } // orig &&= ! ~new  
}

void (+=~)(char& a, char& b;char& c * constant char N)
{
	while(c)
	{
		a += N;
		b += N;
		c -= 1;
	}
} 

void (+=)(char& a, char& b;constant char M * constant char N)
{
	char c;	c += M;
	(a,b) +=~ c * N;
	delete c;
}

syntax if(~char& a){block}
{
	while(a)
	{
		block;
		while(a){a-=1;}
	}
}

syntax if(char& a){block}
{
	char b,c; /*# MEMORY using c #*/ b += a;
	if(~b)
	{
		block;
	}
}

syntax if_B(~char& a){block} // a must be 0 or 1
{
	while(a)
	{
		block;
		a-=1;
	}
}

syntax if_B(char& a){block} // a must be 0 or 1
{
	char b,c; /*# MEMORY using c #*/ b += a;
	if_B(~b)
	{
		block;
	}
}

//main 
char iter;char v_1;char v_2;char v_3;char v_4;char v_5;char v_6;char v_7;char v_8;
/V1/ iter += 9 * 11;
#define snd v_1
while(iter){
    clear(snd);
    clear(v_2);
	/*# MEMORY using v_2 v_3 v_4 #*/
	(v_5,snd) <- iter; // (7,9) <- 79
	nazo (v_2, !v_4, ~v_5);   
 
#define fst v_2  
	nazo2(v_5, !v_6, ~v_4); // v_5 = !fst; v_6 = !!fst;
		
    /V4/ v_3 += snd; // v_3 = snd
    v_4 +=~ v_5;   //  v_4 = !fst; 
    
    v_3-=1; // UNDERFLOW
	
	v_4 &&= ! ~v_3; // v_4 = (fst == 0 && (snd - 1) == 0) ==> iter == 1
	
    v_5+=1;
    if_B(~v_4){
        clear(v_5); //v_5 = (iter != 1)
    }

	
	{ // bottles of beer on the wall // bottles of beer // take one down
	   	/V3/ (fst,snd) += 8 * 6;
		/V78/ 
		if_B(v_6){ 	write(fst);	}	write(snd);
		
		clear(v_3);
		clear(v_4);
		/V4/ v_3 += 4 * 8 ;         write(v_3); // write(' ');
		/V4/ v_3 += 4 * 8 ; v_3+=2; write(v_3); // write('B');
		/V4/ v_3 += 5 * 9 ;         write(v_3); // write('o');
			 v_3 += 5;              write(v_3); // write('t'); 
		;                           write(v_3); // write('t');
			 v_3 -= 8;              write(v_3); // write('l');
			 v_3 -= 7;              write(v_3); // write('e');
		
		/V78/ 
		if_B(v_5){
			 v_3 +=14;              write(v_3); // write('s');
		}
		clear(v_3);
		/V4/ v_3 += 4 * 8 ;         write(v_3); // write(' ');
		/V4/ v_3 += 9 * 9 ; v_3-=2; write(v_3); // write('o');
			 v_3 -= 9;              write(v_3); // write('f');
		/V4/ v_3 -= 7 * 10;         write(v_3); // write(' ');
		/V4/ v_3 += 6 * 11;         write(v_3); // write('b');
			 v_3 += 3;              write(v_3); // write('e'); 
		;                      	    write(v_3); // write('e'); 
			 v_3 +=13;              write(v_3); // write('r');
		/V4/ v_3 -= 8 * 10; v_3-=2; write(v_3); // write(' ');
		/V4/ v_3 += 9 * 9 ; v_3-=2; write(v_3); // write('o');
			 v_3 -= 1;              write(v_3); // write('n');
		/V4/ v_3 -= 8 * 10; v_3+=2; write(v_3); // write(' ');
		/V4/ v_3 += 8 * 10; v_3+=4; write(v_3); // write('t');
			 v_3 -=12;              write(v_3); // write('h');
			 v_3 -= 3;              write(v_3); // write('e');
		/V4/ v_3 -= 7 * 10; v_3+=1; write(v_3); // write(' ');
		/V4/ v_3 += 8 * 11; v_3-=1; write(v_3); // write('w');
		/V4/ v_3 -= 2 * 11;         write(v_3); // write('a');
			 v_3 +=11;              write(v_3); // write('l');
		;                           write(v_3); // write('l'); 
		/V4/ v_3 -= 9 * 10; v_3-=5; write(v_3); // write('\r');
			 v_3 -= 3;              write(v_3); // write('\n');
			 
		/V78/ 
		if_B(v_6){ 	write(fst);	}	write(snd);
		/V4/ v_3 += 4 * 6 ; v_3-=2; write(v_3); // write(' ');
		/V4/ v_3 += 4 * 8 ; v_3+=2; write(v_3); // write('B');
		/V4/ v_3 += 5 * 9 ;         write(v_3); // write('o');
			 v_3 += 5;              write(v_3); // write('t'); 
		;                           write(v_3); // write('t');
			 v_3 -= 8;              write(v_3); // write('l');
			 v_3 -= 7;              write(v_3); // write('e');
			 
		/V78/
		if_B(v_5){
			v_3+=14;                write(v_3); // write('s');
		}
		clear(v_3);
		/V4/ v_3 += 4 * 8 ;         write(v_3); // write(' ');
		/V4/ v_3 += 9 * 9 ; v_3-=2; write(v_3); // write('o');
			 v_3 -= 9;              write(v_3); // write('f');
		/V4/ v_3 -= 7 * 10;         write(v_3); // write(' ');
		/V4/ v_3 += 6 * 11;         write(v_3); // write('b');
			 v_3 += 3;              write(v_3); // write('e'); 
		;                      	    write(v_3); // write('e'); 
			 v_3 +=13;              write(v_3); // write('r');
		/V4/ v_3 -=10 * 10; v_3-=1; write(v_3); // write('\r');
			 v_3 -= 3;              write(v_3); // write('\n');
			 
		/V4/ v_3 += 7 * 10; v_3+=4; write(v_3); // write('T');
			 v_3 +=13;              write(v_3); // write('a');
			 v_3 +=10;              write(v_3); // write('k');
			 v_3 -= 6;              write(v_3); // write('e');
		/V4/ v_3 -= 7 * 10; v_3+=1; write(v_3); // write(' ');
		/V4/ v_3 += 8 * 10; v_3-=1; write(v_3); // write('o');
			 v_3 -= 1;              write(v_3); // write('n');
			 v_3 -= 9;              write(v_3); // write('e');
		/V4/ v_3 -= 7 * 10; v_3+=1; write(v_3); // write(' '); 
		/V4/ v_3 += 7 * 10; v_3-=2; write(v_3); // write('d');
			 v_3 +=11;              write(v_3); // write('o');
			 v_3 += 8;              write(v_3); // write('w');
			 v_3 -= 9;              write(v_3); // write('n');
		/V4/ v_3 -= 8 * 10; v_3+=2; write(v_3); // write(' ');
		/V4/ v_3 += 5 * 13;         write(v_3); // write('a');
			 v_3 +=13;              write(v_3); // write('n');
			 v_3 -=10;              write(v_3); // write('d');
		/V4/ v_3 -= 7 * 10; v_3+=2; write(v_3); // write(' ');
		/V4/ v_3 += 8 * 10;         write(v_3); // write('p');
		/V4/ v_3 -= 3 * 5 ;         write(v_3); // write('a');
		/V4/ v_3 += 3 * 6 ;         write(v_3); // write('s');
		;                           write(v_3); // write('s');
		/V4/ v_3 -= 9 * 9 ; v_3-=2; write(v_3); // write(' ');
		/V4/ v_3 += 7 * 10; v_3+=3; write(v_3); // write('i');
			 v_3 +=11;              write(v_3); // write('t');
		/V4/ v_3 -= 8 * 11; v_3+=4; write(v_3); // write(' ');
		/V4/ v_3 += 5 * 13;         write(v_3); // write('a');
		/V4/ v_3 += 3 * 6 ; v_3-=1; write(v_3); // write('r');
			 v_3 -= 3;              write(v_3); // write('o');
			 v_3 += 6;              write(v_3); // write('u');
			 v_3 -= 7;              write(v_3); // write('n');
			 v_3 -=10;              write(v_3); // write('d');
		/V4/ v_3 -= 8 * 11; v_3+=1; write(v_3); // write('\r');
			 v_3 -= 3;              write(v_3); // write('\n');
		clear(v_3);
    }
	iter-=1;
	
	clear(v_1);
	clear(v_2);
#undef snd	
#undef fst


#define snd v_1
	/*# MEMORY using v_2 v_3 v_4 #*/
    (v_5,snd) <- iter;
	
    nazo (v_2, !v_4, ~v_5);  // v_2 = fst, v_4 = !fst
#define fst v_2
	
    nazo2(v_5, !v_6, ~v_4);  // v_5 = !fst, v_6 = !!fst
   
    /V4/ v_3 += snd;
    v_4 +=~ v_5; // v_4 = !fst
    v_3-=1;
    v_4 &&= ! ~v_3; // v_4 = (fst == 0 && (snd - 1) == 0) ==> iter == 1
    v_5+=1;
    if_B(~v_4){
        clear(v_5); //v_5 = (iter != 1)
    }
    
	/V3/ (v_2,v_1) += 8 * 6;
    
	/V78/
	if_B(v_6){ write(fst); }    write(snd);
	{ // bottles of beer on the wall
		clear(v_3);
		clear(v_4);
		/V4/ v_3 += 4 * 8 ;         write(v_3); // write(' ');
		/V4/ v_3 += 4 * 8 ; v_3+=2; write(v_3); // write('B');
		/V4/ v_3 += 5 * 9 ;         write(v_3); // write('o');
			 v_3 += 5;              write(v_3); // write('t'); 
		;                           write(v_3); // write('t');
			 v_3 -= 8;              write(v_3); // write('l');
			 v_3 -= 7;              write(v_3); // write('e');
		/V78/
		if_B(v_5){
			 v_3 +=14;              write(v_3); // write('s');
		}
		clear(v_3);
		/V4/ v_3 += 4 * 8 ;         write(v_3); // write(' ');
		/V4/ v_3 += 9 * 9 ; v_3-=2; write(v_3); // write('o');
			 v_3 -= 9;              write(v_3); // write('f');
		/V4/ v_3 -= 7 * 10;         write(v_3); // write(' ');
		/V4/ v_3 += 6 * 11;         write(v_3); // write('b');
			 v_3 += 3;              write(v_3); // write('e'); 
		;                      	    write(v_3); // write('e'); 
			 v_3 +=13;              write(v_3); // write('r');
		/V4/ v_3 -= 8 * 10; v_3-=2; write(v_3); // write(' ');
		/V4/ v_3 += 9 * 9 ; v_3-=2; write(v_3); // write('o');
			 v_3 -= 1;              write(v_3); // write('n');
		/V4/ v_3 -= 8 * 10; v_3+=2; write(v_3); // write(' ');
		/V4/ v_3 += 8 * 10; v_3+=4; write(v_3); // write('t');
			 v_3 -=12;              write(v_3); // write('h');
			 v_3 -= 3;              write(v_3); // write('e');
		/V4/ v_3 -= 7 * 10; v_3+=1; write(v_3); // write(' ');
		/V4/ v_3 += 8 * 11; v_3-=1; write(v_3); // write('w');
		/V4/ v_3 -= 2 * 11;         write(v_3); // write('a');
			 v_3 +=11;              write(v_3); // write('l');
		;                           write(v_3); // write('l'); 
		/V4/ v_3 -= 9 * 10; v_3-=5; write(v_3); // write('\r');
			 v_3 -= 3;              write(v_3); // write('\n');
			 v_3 += 3;              write(v_3); // write('\r');
			 v_3 -= 3;              write(v_3); // write('\n');
		clear(v_3);
	}
}
